==== FILE: lib\core\constants\app_colors.dart ====



==== FILE: lib\core\constants\app_constants.dart ====



==== FILE: lib\core\constants\app_strings.dart ====



==== FILE: lib\core\enums\user_type.dart ====



==== FILE: lib\core\errors\failure.dart ====



==== FILE: lib\core\errors\validators.dart ====



==== FILE: lib\core\services\network\network_checker.dart ====



==== FILE: lib\core\services\storage\hive_service.dart ====
import 'package:fig/features/home/domain/model/category_model.dart';
import 'package:hive/hive.dart';

// ŸÑÿßÿ≤ŸÖ ÿ™ÿ≥ÿ¨ŸÑ ÿßŸÑŸÄ adapters ŸÇÿ®ŸÑ ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ Hive
// ÿØŸä Ÿáÿ™ÿπŸÖŸÑŸáÿß ŸÅŸä main.dart
// Hive.registerAdapter(ProductModelAdapter());
// Hive.registerAdapter(CategoryModelAdapter());
// Hive.registerAdapter(CartItemAdapter());

class HiveService {
  static const String productsBoxName = 'products_box';
  static const String favoritesBoxName = 'favorites_box';
  static const String cartBoxName = 'cart_box';

  // ‚úÖ ÿ≠ŸÅÿ∏ ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™
  Future<void> saveProducts(List<ProductModel> products) async {
    final box = await Hive.openBox<ProductModel>(productsBoxName);
    await box.clear();
    await box.addAll(products);
  }

  // ‚úÖ ÿ¨ŸÑÿ® ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™
  Future<List<ProductModel>> getProducts() async {
    final box = await Hive.openBox<ProductModel>(productsBoxName);
    return box.values.toList();
  }

  // ‚úÖ ÿ≠ŸÅÿ∏ ÿßŸÑŸÖŸÅÿ∂ŸÑÿ©
  Future<void> saveFavorites(List<ProductModel> favorites) async {
    final box = await Hive.openBox<ProductModel>(favoritesBoxName);
    await box.clear();
    await box.addAll(favorites);
  }

  // ‚úÖ ÿ¨ŸÑÿ® ÿßŸÑŸÖŸÅÿ∂ŸÑÿ©
  Future<List<ProductModel>> getFavorites() async {
    final box = await Hive.openBox<ProductModel>(favoritesBoxName);
    return box.values.toList();
  }

  // ‚úÖ ÿ≠ŸÅÿ∏ ÿßŸÑÿ≥ŸÑÿ©
  Future<void> saveCart(List<CartItem> cart) async {
    final box = await Hive.openBox<CartItem>(cartBoxName);
    await box.clear();
    await box.addAll(cart);
  }

  // ‚úÖ ÿ¨ŸÑÿ® ÿßŸÑÿ≥ŸÑÿ©
  Future<List<CartItem>> getCart() async {
    final box = await Hive.openBox<CartItem>(cartBoxName);
    return box.values.toList();
  }
}



==== FILE: lib\core\services\storage\secure_storage.dart ====



==== FILE: lib\core\services\storage\shared_preferences.dart ====




==== FILE: lib\core\themes\app_theme.dart ====



==== FILE: lib\core\utils\responsive.dart ====
import 'package:flutter/material.dart';

/// üì± Khalid Responsive Helper
/// ŸÑŸÑÿ≠ŸÅÿßÿ∏ ÿπŸÑŸâ ÿ´ÿ®ÿßÿ™ ÿßŸÑÿ™ÿµŸÖŸäŸÖ ÿπÿ®ÿ± ÿ¨ŸÖŸäÿπ ÿßŸÑÿ¥ÿßÿ¥ÿßÿ™.
///
/// ÿßŸÑŸÖÿ±ÿ¨ÿπŸäÿ© ÿßŸÑÿ≠ÿßŸÑŸäÿ©:
/// Width: 384
/// Height: 784

const double _referenceWidth = 384.0;
const double _referenceHeight = 784.0;

/// üìè ŸÑŸÑÿ≠ÿ≥ÿßÿ® ÿ®ŸÜÿßÿ°Ÿã ÿπŸÑŸâ ÿπÿ±ÿ∂ ÿßŸÑÿ¥ÿßÿ¥ÿ©
double responsiveWidth(BuildContext context, double value) {
  final screenWidth = MediaQuery.of(context).size.width;
  return (value / _referenceWidth) * screenWidth;
}

/// üìè ŸÑŸÑÿ≠ÿ≥ÿßÿ® ÿ®ŸÜÿßÿ°Ÿã ÿπŸÑŸâ ÿßÿ±ÿ™ŸÅÿßÿπ ÿßŸÑÿ¥ÿßÿ¥ÿ©
double responsiveHeight(BuildContext context, double value) {
  final screenHeight = MediaQuery.of(context).size.height;
  return (value / _referenceHeight) * screenHeight;
}

/// üî† ŸÑÿ≠ÿ≥ÿßÿ® ÿ≠ÿ¨ŸÖ ÿßŸÑÿÆÿ∑ ÿ®ÿ¥ŸÉŸÑ ŸÖÿ™Ÿàÿßÿ≤ŸÜ ŸÖÿπ ÿßŸÑÿπÿ±ÿ∂
double responsiveText(BuildContext context, double value) {
  final screenWidth = MediaQuery.of(context).size.width;
  return (value / _referenceWidth) * screenWidth;
}

/// üé® ŸÑÿ≠ÿ≥ÿßÿ® BorderRadius ŸÖÿ™Ÿàÿßÿ≤ŸÜ ŸÖÿπ ÿßŸÑÿπÿ±ÿ∂
double responsiveRadius(BuildContext context, double value) {
  final screenWidth = MediaQuery.of(context).size.width;
  return (value / _referenceWidth) * screenWidth;
}

/// ü™Ñ ŸÑÿ™ÿ≥ŸáŸäŸÑ ŸÉÿ™ÿßÿ®ÿ© responsive ÿ®ÿ£ÿ≥ŸÑŸàÿ® ŸÖÿÆÿ™ÿµÿ±
extension ResponsiveExtensions on num {
  double rw(BuildContext context) => responsiveWidth(context, toDouble());
  double rh(BuildContext context) => responsiveHeight(context, toDouble());
  double rt(BuildContext context) => responsiveText(context, toDouble());
  double rr(BuildContext context) => responsiveRadius(context, toDouble());
}



==== FILE: lib\core\widgets\common_widgets.dart ====
import 'package:flutter/material.dart';

Widget alignedText({
  required String text,
  TextStyle? style,
  Alignment? alignment,
  EdgeInsetsGeometry padding = const EdgeInsets.symmetric(horizontal: 8),
  TextDirection? textDirection,
  bool isBold = false,
}) {
  return Builder(
    builder: (context) {
      final isRtl = Directionality.of(context) == TextDirection.rtl;
      return Align(
        alignment:
            alignment ?? (isRtl ? Alignment.centerRight : Alignment.centerLeft),
        child: Padding(
          padding: padding,
          child: Text(
            text,
            textDirection: textDirection ?? Directionality.of(context),
            style: (style ?? const TextStyle()).copyWith(
              fontWeight: isBold ? FontWeight.bold : FontWeight.normal,
            ),
          ),
        ),
      );
    },
  );
}

Widget buildReusableDivider({
  double height = 3,
  double thickness = 0.5,
  Color color = Colors.black,
}) {
  return Divider(height: height, thickness: thickness, color: color);
}



==== FILE: lib\core\widgets\custom_button.dart ====
import 'package:fig/core/utils/responsive.dart';
import 'package:flutter/material.dart';

class BuildTextField extends StatelessWidget {
  final String hint;
  final bool obscureText;
  final TextEditingController controller;
  final String? Function(String?)? validator;
  final bool showToggleIcon;
  final VoidCallback? onToggle;
  final bool isPasswordVisible;
  final TextInputType keyboardType;
  final IconData? prefixIcon;
  final TextInputAction textInputAction;
  final void Function(String)? onFieldSubmitted;

  const BuildTextField({
    super.key,
    required this.hint,
    this.obscureText = false,
    required this.controller,
    this.validator,
    this.showToggleIcon = false,
    this.onToggle,
    this.isPasswordVisible = true,
    this.keyboardType = TextInputType.text,
    this.prefixIcon,
    this.textInputAction = TextInputAction.next,
    this.onFieldSubmitted,
  });

  @override
  Widget build(BuildContext context) {
    return TextFormField(
      textInputAction: textInputAction,
      onFieldSubmitted: onFieldSubmitted,
      cursorColor: Colors.white,
      validator: validator,
      controller: controller,
      obscureText: showToggleIcon ? !isPasswordVisible : false,
      keyboardType: keyboardType,
      style: TextStyle(
        color: Colors.black,
        fontSize: responsiveText(context, 16),
      ),
      decoration: InputDecoration(
        prefixIcon:
            prefixIcon != null
                ? Icon(
                  prefixIcon,
                  color: Colors.black,
                  size: responsiveWidth(context, 24),
                )
                : null,
        labelText: hint,
        hintText: hint,
        labelStyle: TextStyle(
          color: Colors.black,
          fontSize: responsiveText(context, 16),
        ),
        filled: true,
        fillColor: Colors.transparent,
        contentPadding: EdgeInsets.symmetric(
          horizontal: responsiveWidth(context, 20),
          vertical: responsiveHeight(context, 15),
        ),
        //border: OutlineInputBorder(borderRadius: BorderRadius.circular(5)),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(5),
          borderSide: BorderSide(color: Colors.grey),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(5),
          borderSide: BorderSide(color: Colors.grey, width: 2),
        ),
        suffixIcon:
            showToggleIcon
                ? IconButton(
                  icon: Icon(
                    isPasswordVisible ? Icons.visibility : Icons.visibility_off,
                    color: Colors.grey,
                    size: responsiveWidth(context, 24),
                  ),
                  onPressed: onToggle,
                )
                : null,
      ),
    );
  }
}

class PrimaryButton extends StatelessWidget {
  final String label;
  final VoidCallback onPressed;
  final Color? backgroundColor;
  final Color? foregroundColor;
  final Color? borderColor;
  final IconData? icon;
  final bool iconAtEnd;
  final FontWeight fontWeight;

  const PrimaryButton({
    super.key,
    required this.label,
    required this.onPressed,
    this.backgroundColor,
    this.foregroundColor,
    this.borderColor,
    this.icon,
    this.iconAtEnd = false,
    this.fontWeight = FontWeight.bold,
  });

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 8),
      child: ElevatedButton(
        onPressed: onPressed,
        style: ElevatedButton.styleFrom(
          backgroundColor: backgroundColor ?? Colors.white,
          foregroundColor: foregroundColor ?? Colors.white,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(5),
            side:
                borderColor != null
                    ? BorderSide(color: borderColor!)
                    : BorderSide.none,
          ),
          minimumSize: Size(double.infinity, 45.rh(context)),
        ),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.center,
          mainAxisSize: MainAxisSize.min,
          children:
              icon == null
                  ? [
                    Text(
                      label,
                      style: TextStyle(
                        fontSize: 16.rt(context),
                        fontWeight: fontWeight, // ‚úÖ ÿ™ŸÖ ÿßŸÑÿ™ÿ®ÿØŸäŸÑ ŸáŸÜÿß
                      ),
                    ),
                  ]
                  : iconAtEnd
                  ? [
                    Text(
                      label,
                      style: TextStyle(
                        fontSize: 16.rt(context),
                        fontWeight: fontWeight, // ‚úÖ
                      ),
                    ),
                    const SizedBox(width: 8),
                    Icon(
                      icon,
                      size: 20,
                      color: foregroundColor ?? Colors.white,
                    ),
                  ]
                  : [
                    Icon(
                      icon,
                      size: 20,
                      color: foregroundColor ?? Colors.white,
                    ),
                    const SizedBox(width: 8),
                    Text(
                      label,
                      style: TextStyle(
                        fontSize: 16.rt(context),
                        fontWeight: fontWeight, // ‚úÖ
                      ),
                    ),
                  ],
        ),
      ),
    );
  }
}

class TransparentTextButton extends StatelessWidget {
  final String label;
  final VoidCallback onPressed;

  const TransparentTextButton({
    super.key,
    required this.label,
    required this.onPressed,
  });

  @override
  Widget build(BuildContext context) {
    final colorScheme = Theme.of(context).colorScheme;

    return TextButton(
      onPressed: onPressed,
      style: TextButton.styleFrom(
        padding: EdgeInsets.zero, // ÿ™ŸÇŸÑŸäŸÑ ÿßŸÑÿ≠ÿ¥Ÿà ÿßŸÑÿßŸÅÿ™ÿ±ÿßÿ∂Ÿä
        minimumSize: Size(0, 0), // ŸäŸÖŸÜÿπ ÿßÿ≥ÿ™ŸáŸÑÿßŸÉ ŸÖÿ≥ÿßÿ≠ÿ© ÿ≤ÿßÿ¶ÿØÿ©
        tapTargetSize: MaterialTapTargetSize.shrinkWrap, // ÿ∂ÿ∫ÿ∑ ŸÖŸÜÿ∑ŸÇÿ© ÿßŸÑÿ™ŸÅÿßÿπŸÑ
      ),
      child: Text(
        label,
        overflow: TextOverflow.ellipsis, // ŸÑŸÖŸÜÿπ overflow
        softWrap: false, // ŸÖŸÜÿπ ÿßŸÑŸÜÿ≤ŸàŸÑ ŸÑŸÑÿ≥ÿ∑ÿ± ÿ•ÿ∞ÿß ÿ£ÿ±ÿØÿ™
        style: TextStyle(
          color: colorScheme.onSurface.withOpacity(0.6),
          fontSize: 14,
        ),
      ),
    );
  }
}

class SocialLoginButton extends StatelessWidget {
  final IconData? iconData;
  final Color? iconColor;
  final Widget? iconWidget;
  final String label;
  final Color color;
  final Color textColor;
  final VoidCallback onTap;

  const SocialLoginButton({
    super.key,
    this.iconData,
    this.iconColor,
    this.iconWidget,
    required this.label,
    required this.color,
    required this.textColor,
    required this.onTap,
  });

  @override
  Widget build(BuildContext context) {
    return InkWell(
      onTap: onTap,
      borderRadius: BorderRadius.circular(20),
      child: Container(
        width: 135.rw(context),
        padding: EdgeInsets.symmetric(vertical: 12.rh(context)),
        decoration: BoxDecoration(
          color: color,
          borderRadius: BorderRadius.circular(20),
        ),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.center, // ŸäŸàÿ≥Ÿëÿ∑ ÿßŸÑŸÖÿ≠ÿ™ŸàŸâ ÿ£ŸÅŸÇŸäŸãÿß
          crossAxisAlignment:
              CrossAxisAlignment.center, // ŸäŸàÿ≥Ÿëÿ∑ ÿßŸÑŸÖÿ≠ÿ™ŸàŸâ ÿπŸÖŸàÿØŸäŸãÿß
          mainAxisSize: MainAxisSize.min,
          children: [
            if (iconWidget != null)
              iconWidget!
            else if (iconData != null)
              Icon(iconData, color: iconColor ?? Colors.white),
            SizedBox(width: 6.rw(context)),
            Text(
              label,
              style: TextStyle(color: textColor, fontWeight: FontWeight.bold),
            ),
          ],
        ),
      ),
    );
  }
}



==== FILE: lib\core\widgets\loading_indicator.dart ====



==== FILE: lib\core\widgets\shimmer\shimmer_horizontal_item.dart ====
import 'package:flutter/material.dart';
import 'package:shimmer/shimmer.dart';

class ShimmerHorizontalItem extends StatelessWidget {
  const ShimmerHorizontalItem({super.key});

  @override
  Widget build(BuildContext context) {
    return Shimmer.fromColors(
      baseColor: Colors.grey.shade300,
      highlightColor: Colors.grey.shade100,
      child: Container(
        width: 100,
        margin: const EdgeInsets.symmetric(horizontal: 8),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Container(
              height: 80,
              width: double.infinity,
              decoration: BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.circular(8),
              ),
            ),
            const SizedBox(height: 8),
            Container(height: 12, width: 80, color: Colors.white),
          ],
        ),
      ),
    );
  }
}



==== FILE: lib\core\widgets\shimmer\shimmer_vertical_item.dart ====
import 'package:flutter/material.dart';
import 'package:shimmer/shimmer.dart';

class ShimmerVerticalItem extends StatelessWidget {
  const ShimmerVerticalItem({super.key});

  @override
  Widget build(BuildContext context) {
    return Shimmer.fromColors(
      baseColor: Colors.grey.shade300,
      highlightColor: Colors.grey.shade100,
      child: Container(
        margin: const EdgeInsets.symmetric(vertical: 8),
        child: Row(
          children: [
            Container(
              height: 80,
              width: 80,
              decoration: BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.circular(8),
              ),
            ),
            const SizedBox(width: 12),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Container(
                    height: 12,
                    width: double.infinity,
                    color: Colors.white,
                  ),
                  const SizedBox(height: 8),
                  Container(height: 12, width: 150, color: Colors.white),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}



==== FILE: lib\core\widgets\shimmer_skeletons.dart ====
import 'package:fig/core/utils/responsive.dart';
import 'package:flutter/material.dart';
import 'package:shimmer/shimmer.dart';

Color _baseColor(BuildContext c) => Colors.grey.shade300;
Color _highlightColor(BuildContext c) => Colors.grey.shade100;
const _period = Duration(milliseconds: 1200);

class AppShimmer extends StatelessWidget {
  final Widget child;

  const AppShimmer({super.key, required this.child});

  @override
  Widget build(BuildContext context) {
    return Shimmer.fromColors(
      baseColor: _baseColor(context),
      highlightColor: _highlightColor(context),
      period: _period,
      child: child,
    );
  }
}

class _ShimmerBox extends StatelessWidget {
  final double height;
  final double width;
  final BorderRadius borderRadius;

  const _ShimmerBox({
    required this.height,
    required this.width,
    this.borderRadius = const BorderRadius.all(Radius.circular(12)),
  });

  @override
  Widget build(BuildContext context) {
    return Container(
      height: height,
      width: width,
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: borderRadius,
      ),
    );
  }
}

class CategoryRowShimmer extends StatelessWidget {
  final int itemCount;
  final double itemSize;
  const CategoryRowShimmer({super.key, this.itemCount = 8, this.itemSize = 50});

  @override
  Widget build(BuildContext context) {
    return AppShimmer(
      child: SizedBox(
        height: (itemSize + 33).rh(context),
        child: ListView.separated(
          scrollDirection: Axis.horizontal,
          padding: EdgeInsets.symmetric(horizontal: 12.rw(context)),
          itemCount: itemCount,
          separatorBuilder: (_, __) => SizedBox(width: 15.rw(context)),
          itemBuilder:
              (_, __) => Column(
                crossAxisAlignment: CrossAxisAlignment.center,
                children: [
                  _ShimmerBox(
                    height: (itemSize + 10).rh(context),
                    width: itemSize.rw(context),
                    borderRadius: BorderRadius.circular(10.rr(context)),
                  ),
                  SizedBox(height: 8.rh(context)),
                  _ShimmerBox(
                    height: 13.rh(context),
                    width: (itemSize * 1.4).rw(context),
                    borderRadius: BorderRadius.circular(6.rr(context)),
                  ),
                ],
              ),
        ),
      ),
    );
  }
}

class ProductGridShimmer extends StatelessWidget {
  final int itemCount;
  const ProductGridShimmer({super.key, this.itemCount = 14});

  @override
  Widget build(BuildContext context) {
    final screenWidth = MediaQuery.of(context).size.width;
    final padding = 8.rw(context) * 2;
    final spacing = 8.rw(context);
    final columnWidth = (screenWidth - padding - spacing) / 2;

    final cardHeight =
        190.rh(context) +
        10.rh(context) +
        18.rh(context) +
        10.rh(context) +
        16.rh(context);
    final childAspectRatio = columnWidth / cardHeight;

    return AppShimmer(
      child: GridView.builder(
        itemCount: itemCount,
        gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
          crossAxisCount: 2,
          crossAxisSpacing: 8.rw(context),
          mainAxisSpacing: 15.rh(context),
          childAspectRatio: childAspectRatio,
        ),
        itemBuilder:
            (_, __) => Card(
              elevation: 0,
              color: Colors.transparent,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(12.rr(context)),
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  _ShimmerBox(
                    height: 190.rh(context),
                    width: double.infinity,
                    borderRadius: BorderRadius.all(
                      Radius.circular(20.rr(context)),
                    ),
                  ),
                  SizedBox(height: 10.rh(context)),
                  _ShimmerBox(
                    height: 18.rh(context),
                    width: 100.rw(context),
                    borderRadius: BorderRadius.zero,
                  ),
                  SizedBox(height: 10.rh(context)),
                  _ShimmerBox(
                    height: 16.rh(context),
                    width: 80.rw(context),
                    borderRadius: BorderRadius.zero,
                  ),
                ],
              ),
            ),
      ),
    );
  }
}

class ProductListShimmer extends StatelessWidget {
  final int itemCount;
  const ProductListShimmer({super.key, this.itemCount = 10});

  @override
  Widget build(BuildContext context) {
    return AppShimmer(
      child: ListView.separated(
        padding: EdgeInsets.all(6.rw(context)),
        itemCount: itemCount,
        separatorBuilder: (_, __) => SizedBox(height: 12.rh(context)),
        itemBuilder:
            (_, __) => Card(
              color: Colors.transparent,
              margin: EdgeInsets.symmetric(
                horizontal: 6.rw(context),
                vertical: 6.rh(context),
              ),
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(12.rr(context)),
              ),
              elevation: 0,
              child: Padding(
                padding: EdgeInsets.all(8.rw(context)),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    _ShimmerBox(
                      height: 180.rh(context),
                      width: double.infinity,
                      borderRadius: BorderRadius.circular(12.rr(context)),
                    ),
                    SizedBox(height: 10.rh(context)),
                    _ShimmerBox(
                      height: 14.rh(context),
                      width: 200.rw(context),
                      borderRadius: BorderRadius.zero,
                    ),
                    SizedBox(height: 6.rh(context)),
                    _ShimmerBox(
                      height: 14.rh(context),
                      width: 120.rw(context),
                      borderRadius: BorderRadius.zero,
                    ),
                  ],
                ),
              ),
            ),
      ),
    );
  }
}

class ProductOrCategoryCardShimmer extends StatelessWidget {
  final int itemCount;
  const ProductOrCategoryCardShimmer({super.key, this.itemCount = 8});

  @override
  Widget build(BuildContext context) {
    return AppShimmer(
      child: ListView.separated(
        padding: const EdgeInsets.all(16),
        itemCount: itemCount,
        separatorBuilder: (_, __) => const SizedBox(height: 16),

        itemBuilder: (_, __) {
          return Container(
            height: 100,
            decoration: BoxDecoration(borderRadius: BorderRadius.circular(16)),

            child: Padding(
              padding: const EdgeInsets.all(12.0), // padding ÿØÿßÿÆŸÑŸä ŸÑŸÑŸÉÿßÿ±ÿ™
              child: Row(
                children: [
                  // ÿµŸàÿ±ÿ© ÿ¥ŸäŸÖÿ±
                  ClipRRect(
                    borderRadius: BorderRadius.circular(12),
                    child: _ShimmerBox(
                      height: 80,
                      width: 100,
                      borderRadius: BorderRadius.circular(12),
                    ),
                  ),

                  const SizedBox(width: 16),

                  // ŸÜÿµ ÿ¥ŸäŸÖÿ±
                  Expanded(
                    child: _ShimmerBox(
                      height: 16,
                      width: double.infinity,
                      borderRadius: BorderRadius.circular(4),
                    ),
                  ),
                ],
              ),
            ),
          );
        },
      ),
    );
  }
}



==== FILE: lib\features\Basket\basket_screen.dart ====
import 'package:fig/features/Navigation/presentation/cubit/navigation_cubit.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:fig/features/home/presentation/cubit/home_cubit.dart';

class CartScreen extends StatelessWidget {
  const CartScreen({super.key});

  @override
  Widget build(BuildContext context) {
    final homeCubit = context.watch<HomeCubit>();
    final cart = homeCubit.state.cart;

    double grandTotal = 0;
    for (var cartItem in cart) {
      final qty = cartItem.quantity;
      grandTotal += cartItem.product.price * qty;
    }

    return Scaffold(
      appBar: AppBar(
        backgroundColor: Colors.white,
        elevation: 0,
        surfaceTintColor: Colors.transparent,
        title: Text('My Shopping Cart (${cart.length} Products)'),
        actions: [
          IconButton(
            icon: Icon(Icons.close),
            onPressed: () {
              context.read<NavigationCubit>().changeTab(0);
            },
          ),
        ],
      ),
      body:
          cart.isEmpty
              ? Center(child: Text('Your cart is empty'))
              : Column(
                crossAxisAlignment: CrossAxisAlignment.center,
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Container(
                    color: Colors.grey.shade200,
                    padding: const EdgeInsets.all(12),
                    child: Text(
                      'Get extra 5% off at cart on app! Only for credit card payments!',
                      style: TextStyle(fontSize: 14),
                    ),
                  ),
                  Expanded(
                    child: ListView.separated(
                      itemCount: cart.length,
                      separatorBuilder: (_, __) => Divider(),
                      itemBuilder: (context, index) {
                        final cartItem = cart[index];
                        final product = cartItem.product;
                        final qty = cart[index].quantity;

                        return Container(
                          padding: const EdgeInsets.symmetric(
                            vertical: 15.0,
                            horizontal: 16.0,
                          ),
                          child: Row(
                            crossAxisAlignment: CrossAxisAlignment.center,
                            children: [
                              SizedBox(
                                width: 80,
                                height: 120, // ÿßÿ±ÿ™ŸÅÿßÿπ ÿßŸÑÿµŸàÿ±ÿ© ÿßŸÑŸÑŸä ÿßŸÜÿ™ ÿπÿßŸäÿ≤Ÿá
                                child: Image.asset(
                                  product.imageUrls.first,
                                  fit: BoxFit.cover,
                                ),
                              ),
                              const SizedBox(width: 20),

                              Expanded(
                                child: Column(
                                  mainAxisAlignment: MainAxisAlignment.center,
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    Text(
                                      product.title,
                                      style: const TextStyle(
                                        fontWeight: FontWeight.bold,
                                      ),
                                    ),
                                    const SizedBox(height: 6),
                                    Text(product.id),
                                    Text('Size: 28'),
                                    Text('Color: Anthracite'),
                                    const SizedBox(height: 10),
                                    Text(
                                      'EGP ${product.price.toStringAsFixed(0)}',
                                      style: const TextStyle(
                                        fontWeight: FontWeight.bold,
                                      ),
                                    ),
                                  ],
                                ),
                              ),

                              Column(
                                mainAxisAlignment: MainAxisAlignment.center,

                                children: [
                                  IconButton(
                                    icon: const Icon(
                                      Icons.delete,
                                      color: Colors.red,
                                      size: 28,
                                    ),
                                    onPressed: () {
                                      context
                                          .read<HomeCubit>()
                                          .removeFromCartById(cartItem.id);
                                    },
                                  ),
                                  DropdownButton<int>(
                                    value: qty,
                                    icon: Icon(Icons.arrow_drop_down),
                                    elevation: 16,
                                    underline: SizedBox.shrink(),
                                    items:
                                        List.generate(
                                          5,
                                          (i) => i + 1,
                                        ).map<DropdownMenuItem<int>>((
                                          int value,
                                        ) {
                                          return DropdownMenuItem<int>(
                                            value: value,
                                            child: Text(value.toString()),
                                          );
                                        }).toList(),
                                    onChanged: (int? newValue) {
                                      if (newValue != null) {
                                        homeCubit.updateCartQuantity(
                                          cartItem.id,
                                          newValue,
                                        );
                                      }
                                    },
                                  ),
                                ],
                              ),
                            ],
                          ),
                        );
                      },
                    ),
                  ),
                  Divider(),
                  Padding(
                    padding: const EdgeInsets.symmetric(
                      horizontal: 20,
                      vertical: 6,
                    ),
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        Text(
                          'GRAND TOTAL',
                          style: TextStyle(
                            fontWeight: FontWeight.bold,
                            fontSize: 16,
                          ),
                        ),
                        Text(
                          'EGP ${grandTotal.toStringAsFixed(2)}',
                          style: TextStyle(
                            fontWeight: FontWeight.bold,
                            fontSize: 16,
                          ),
                        ),
                      ],
                    ),
                  ),
                  Padding(
                    padding: const EdgeInsets.all(10.0),
                    child: ElevatedButton(
                      style: ElevatedButton.styleFrom(
                        minimumSize: Size(double.infinity, 50),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(5),
                        ),
                        backgroundColor: Colors.red[600],
                      ),
                      onPressed: () {},
                      child: Text(
                        'PROCEED TO PAYMENT',
                        style: TextStyle(color: Colors.white, fontSize: 18),
                      ),
                    ),
                  ),
                ],
              ),
    );
  }
}



==== FILE: lib\features\Favorites\presentation\pages\favorites_Screen.dart ====
import 'package:fig/features/home/presentation/cubit/home_cubit.dart';
import 'package:fig/features/home/widgets/home_widget.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

class FavoritesScreen extends StatelessWidget {
  const FavoritesScreen({super.key});

  PreferredSizeWidget _buildAppBar() {
    return AppBar(
      backgroundColor: Colors.white,
      elevation: 0,
      surfaceTintColor: Colors.transparent,
      title: const Text(
        'My Favorites',
        style: TextStyle(fontWeight: FontWeight.bold),
      ),
      actions: [
        IconButton(
          padding: const EdgeInsets.symmetric(horizontal: 16),
          icon: const Icon(Icons.search, size: 28, color: Colors.black),
          onPressed: () {},
        ),
      ],
    );
  }

  @override
  Widget build(BuildContext context) {
    final favorites = context.watch<HomeCubit>().state.favorites;
    final homeCubit = context.read<HomeCubit>();

    return Scaffold(
      backgroundColor: Colors.white,
      appBar: _buildAppBar(),
      body:
          favorites.isEmpty
              ? const Center(child: Text('No favorite products yet'))
              : GridView.builder(
                padding: const EdgeInsets.all(8),
                itemCount: favorites.length,
                gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                  crossAxisCount: 2,
                  crossAxisSpacing: 8,
                  mainAxisSpacing: 8,
                  childAspectRatio: 0.5,
                ),
                itemBuilder: (context, index) {
                  final product = favorites[index];
                  return Column(
                    children: [
                      GridProductView(product: product, showSecondIcon: false),
                      ElevatedButton(
                        onPressed: () {
                          homeCubit.addToCart(product);
                          ScaffoldMessenger.of(context).showSnackBar(
                            SnackBar(
                              content: Text('Added ${product.title} to cart'),
                            ),
                          );
                        },
                        child: const Text('Add to Cart'),
                      ),
                    ],
                  );
                },
              ),
    );
  }
}



==== FILE: lib\features\home\data\category_data.dart ====
import 'package:fig/features/home/domain/model/category_model.dart';

final List<CategoryModel> allCategories = [
  CategoryModel(
    id: '1',
    name: 'Blazers',
    imageUrl: 'assets/images/appIcon/fig.png',
  ),
  CategoryModel(
    id: '2',
    name: 'Blouses',
    imageUrl: 'assets/images/appIcon/fig.png',
  ),
  CategoryModel(
    id: '3',
    name: 'Bodysuits',
    imageUrl: 'assets/images/appIcon/fig.png',
  ),
  CategoryModel(
    id: '4',
    name: 'Cardigan',
    imageUrl: 'assets/images/appIcon/fig.png',
  ),
  CategoryModel(
    id: '5',
    name: 'Cargo pants',
    imageUrl: 'assets/images/appIcon/fig.png',
  ),
  CategoryModel(
    id: '6',
    name: 'Shirts',
    imageUrl: 'assets/images/appIcon/fig.png',
  ),
  CategoryModel(
    id: '7',
    name: 'Pants',
    imageUrl: 'assets/images/appIcon/fig.png',
  ),
];



==== FILE: lib\features\home\data\products_data.dart ====
import 'package:fig/features/home/domain/model/category_model.dart';

final List<ProductModel> allProducts = [
  ProductModel(
    id: '1',
    categoryId: '1',
    title: 'Slim Blazer',
    imageUrls: [
      'assets/images/1.jpg',
      'assets/images/2.jpg',
      'assets/images/3.jpg',

      'assets/images/10.jpg',
      'assets/images/11.jpg',
      'assets/images/12.jpg',
    ],
    description:
        'Elegant navy blue slim blazer. Perfect for office or casual outings. Comfortable fit and stylish design.',
    price: 1200.0,
    availableColors: ['Black', 'Red', 'Navy', 'Green', 'Beige'],
    availableSizes: [44, 36, 42, 46],
    lapel: 'Slim Blazer with modern cut',
  ),
  ProductModel(
    id: '2',
    categoryId: '1',
    title: 'Classic Black Blazer',
    imageUrls: [
      'assets/images/4.jpg',
      'assets/images/5.jpg',
      'assets/images/6.jpg',
    ],
    description:
        'Timeless black blazer. Stylish and comfortable. Perfect for evening or formal occasions.',
    price: 1300.0,
    availableColors: ['Green', 'Navy', 'White', 'Black'],
    availableSizes: [44, 46, 40, 48],
    lapel: 'Classic notched lapel for elegance',
  ),
  ProductModel(
    id: '3',
    categoryId: '1',
    title: 'Grey Blazer',
    imageUrls: [
      'assets/images/7.jpg',
      'assets/images/8.jpg',
      'assets/images/9.jpg',

      'assets/images/10.jpg',
      'assets/images/11.jpg',
      'assets/images/12.jpg',
    ],
    description:
        'Modern grey blazer. Lightweight fabric. Can be paired with jeans or formal pants.',
    price: 1100.0,
    availableColors: ['Green', 'Grey', 'Navy', 'Black', 'Red'],
    availableSizes: [46, 36, 48, 44, 40],
    lapel: 'Notched lapel with simple design',
  ),
  ProductModel(
    id: '4',
    categoryId: '1',
    title: 'Checked Blazer',
    imageUrls: [
      'assets/images/10.jpg',
      'assets/images/11.jpg',
      'assets/images/12.jpg',
    ],
    description:
        'Stylish checked pattern blazer. Ideal for office wear. Elegant and fashionable.',
    price: 1250.0,
    availableColors: ['Red', 'Grey', 'White', 'Beige'],
    availableSizes: [36, 38, 44, 46],
    lapel: 'Wide peak lapel with bold style',
  ),
  ProductModel(
    id: '5',
    categoryId: '1',
    title: 'Double-breasted Blazer',
    imageUrls: [
      'assets/images/13.jpg',
      'assets/images/14.jpg',
      'assets/images/15.jpg',
    ],
    description:
        'Elegant double-breasted design. Comfortable and chic. Perfect for formal events.',
    price: 1400.0,
    availableColors: ['Black', 'Beige', 'Navy'],
    availableSizes: [38, 40, 42, 44],
    lapel: 'Sharp peak lapel with formal edge',
  ),
  ProductModel(
    id: '6',
    categoryId: '1',
    title: 'Linen Blazer',
    imageUrls: [
      'assets/images/16.jpg',
      'assets/images/17.jpg',
      'assets/images/18.jpg',
    ],
    description:
        'Lightweight linen fabric. Breathable and stylish. Great for summer outings.',
    price: 1150.0,
    availableColors: ['Grey', 'Green', 'Red'],
    availableSizes: [36, 38, 40, 42, 44],
    lapel: 'Casual shawl lapel for summer vibes',
  ),
  ProductModel(
    id: '7',
    categoryId: '2',
    title: 'Silk Blouse',
    imageUrls: [
      'assets/images/19.jpg',
      'assets/images/20.jpg',
      'assets/images/21.jpg',
    ],
    description:
        'Soft pink silk blouse. Comfortable and elegant. Perfect for casual and formal wear.',
    price: 700.0,
    availableColors: ['White', 'Red', 'Beige'],
    availableSizes: [36, 40, 42, 44],
    lapel: 'Delicate round lapel with soft finish',
  ),
  ProductModel(
    id: '8',
    categoryId: '2',
    title: 'Floral Blouse',
    imageUrls: [
      'assets/images/22.jpg',
      'assets/images/23.jpg',
      'assets/images/24.jpg',
    ],
    description:
        'Bright floral print blouse. Lightweight fabric. Ideal for spring and summer.',
    price: 650.0,
    availableColors: ['Green', 'Red', 'Navy', 'Beige'],
    availableSizes: [38, 40, 42],
    lapel: 'Wide collar lapel with floral touch',
  ),
  ProductModel(
    id: '9',
    categoryId: '2',
    title: 'Sleeveless Blouse',
    imageUrls: [
      'assets/images/25.jpg',
      'assets/images/26.jpg',
      'assets/images/27.jpg',
    ],
    description:
        'Light summer style sleeveless blouse. Elegant and airy. Perfect for hot weather.',
    price: 550.0,
    availableColors: ['White', 'Black', 'Grey'],
    availableSizes: [36, 38, 42, 44, 46],
    lapel: 'Minimal neckline lapel for casual comfort',
  ),
  ProductModel(
    id: '10',
    categoryId: '2',
    title: 'Ruffled Blouse',
    imageUrls: [
      'assets/images/28.jpg',
      'assets/images/29.jpg',
      'assets/images/30.jpg',
    ],
    description:
        'Elegant ruffles design. Soft and comfortable. Can be dressed up or down.',
    price: 750.0,
    availableColors: ['Navy', 'Red', 'Green', 'Black'],
    availableSizes: [38, 40, 42, 44],
    lapel: 'Soft lapel with layered ruffle design',
  ),
  ProductModel(
    id: '11',
    categoryId: '2',
    title: 'Buttoned Blouse',
    imageUrls: [
      'assets/images/31.jpg',
      'assets/images/1.jpg',
      'assets/images/2.jpg',
    ],
    description:
        'Casual buttoned blouse. Light and stylish. Great for everyday wear.',
    price: 600.0,
    availableColors: ['White', 'Beige', 'Grey'],
    availableSizes: [36, 38, 40],
    lapel: 'Casual shirt lapel with button finish',
  ),
  ProductModel(
    id: '12',
    categoryId: '2',
    title: 'Chiffon Blouse',
    imageUrls: [
      'assets/images/3.jpg',
      'assets/images/4.jpg',
      'assets/images/5.jpg',
    ],
    description: 'Light chiffon fabric. Elegant drape. Perfect for layering.',
    price: 680.0,
    availableColors: ['Red', 'Navy', 'Green', 'White'],
    availableSizes: [38, 40, 42, 44, 46],

    lapel: 'Flowy lapel with chiffon-inspired elegance',
  ),

  ProductModel(
    id: '13',
    categoryId: '3',
    title: 'Black Bodysuit',
    imageUrls: [
      'assets/images/9.jpg',
      'assets/images/7.jpg',
      'assets/images/8.jpg',
    ],
    description:
        'Comfortable black bodysuit. Slim fit design. Perfect for pairing with skirts or pants.',
    price: 550.0,
    availableColors: ['Black', 'Red', 'Beige'],
    availableSizes: [36, 38, 40, 42],
    lapel: 'Slim neckline lapel with minimal cut',
  ),
  ProductModel(
    id: '14',
    categoryId: '3',
    title: 'White Bodysuit',
    imageUrls: [
      'assets/images/9.jpg',
      'assets/images/10.jpg',
      'assets/images/11.jpg',
    ],
    description:
        'Elegant white bodysuit. Stretchable fabric. Suitable for casual or formal occasions.',
    price: 580.0,
    availableColors: ['White', 'Grey', 'Navy'],
    availableSizes: [36, 38, 40, 44],
    lapel: 'Round lapel with stretch fabric detail',
  ),
  ProductModel(
    id: '15',
    categoryId: '3',
    title: 'Lace Bodysuit',
    imageUrls: [
      'assets/images/12.jpg',
      'assets/images/13.jpg',
      'assets/images/14.jpg',
    ],
    description:
        'Delicate lace design. Comfortable and chic. Perfect for evening wear.',
    price: 620.0,
    availableColors: ['Red', 'White', 'Beige'],
    availableSizes: [38, 40, 42, 44],
    lapel: 'Elegant lace lapel with chic style',
  ),
  ProductModel(
    id: '16',
    categoryId: '3',
    title: 'Long Sleeve Bodysuit',
    imageUrls: [
      'assets/images/15.jpg',
      'assets/images/16.jpg',
      'assets/images/17.jpg',
    ],
    description:
        'Perfect for layering. Comfortable fabric. Elegant design for everyday wear.',
    price: 600.0,
    availableColors: ['Black', 'Grey', 'White'],
    availableSizes: [36, 38, 42, 44, 46],
    lapel: 'High neckline lapel with long sleeves',
  ),
  ProductModel(
    id: '17',
    categoryId: '3',
    title: 'Tank Bodysuit',
    imageUrls: [
      'assets/images/18.jpg',
      'assets/images/19.jpg',
      'assets/images/20.jpg',
    ],
    description: 'Casual tank style. Slim fit. Ideal for summer.',
    price: 530.0,
    availableColors: ['White', 'Navy', 'Beige'],
    availableSizes: [36, 38, 40],
    lapel: 'Tank-style lapel with relaxed fit',
  ),
  ProductModel(
    id: '18',
    categoryId: '3',
    title: 'Striped Bodysuit',
    imageUrls: [
      'assets/images/21.jpg',
      'assets/images/22.jpg',
      'assets/images/23.jpg',
    ],
    description:
        'Modern striped look. Comfortable and stylish. Can be worn casually or formally.',
    price: 590.0,
    availableColors: ['Red', 'Grey', 'Black', 'White'],
    availableSizes: [38, 40, 42, 44],
    lapel: 'Striped lapel design with casual edge',
  ),

  ProductModel(
    id: '19',
    categoryId: '4',
    title: 'Knitted Cardigan',
    imageUrls: [
      'assets/images/24.jpg',
      'assets/images/25.jpg',
      'assets/images/26.jpg',
    ],
    description:
        'Warm knitted cardigan. Cozy and stylish. Perfect for winter wear.',
    price: 850.0,
    availableColors: ['Grey', 'Beige', 'Navy'],
    availableSizes: [38, 40, 42, 44],
    lapel: 'Thick knitted lapel with cozy finish',
  ),
  ProductModel(
    id: '20',
    categoryId: '4',
    title: 'Long Cardigan',
    imageUrls: [
      'assets/images/27.jpg',
      'assets/images/28.jpg',
      'assets/images/29.jpg',
    ],
    description:
        'Elegant long cardigan. Lightweight material. Suitable for layering.',
    price: 900.0,
    availableColors: ['Black', 'White', 'Beige'],
    availableSizes: [36, 38, 40, 42, 44],
    lapel: 'Flowy long lapel with open design',
  ),
  ProductModel(
    id: '21',
    categoryId: '4',
    title: 'Buttoned Cardigan',
    imageUrls: [
      'assets/images/30.jpg',
      'assets/images/31.jpg',
      'assets/images/32.jpg',
    ],
    description:
        'Casual buttoned design. Perfect for everyday wear. Comfortable and simple.',
    price: 780.0,
    availableColors: ['Red', 'Grey', 'Navy'],
    availableSizes: [36, 38, 40, 42],
    lapel: 'Casual lapel with buttoned closure',
  ),

  ProductModel(
    id: '22',
    categoryId: '4',
    title: 'Oversized Cardigan',
    imageUrls: [
      'assets/images/1.jpg',
      'assets/images/2.jpg',
      'assets/images/3.jpg',
    ],
    description:
        'Oversized fit cardigan. Modern style. Great for layering in cold weather.',
    price: 950.0,
    availableColors: ['Beige', 'Grey', 'Black'],
    availableSizes: [38, 40, 42, 44, 46],
    lapel: 'Loose lapel with oversized relaxed cut',
  ),
  ProductModel(
    id: '23',
    categoryId: '4',
    title: 'Striped Cardigan',
    imageUrls: [
      'assets/images/4.jpg',
      'assets/images/5.jpg',
      'assets/images/6.jpg',
    ],
    description:
        'Trendy striped pattern. Comfortable fit. Perfect for casual outings.',
    price: 880.0,
    availableColors: ['Navy', 'Red', 'White'],
    availableSizes: [36, 38, 40, 42],
    lapel: 'Striped lapel with modern casual vibe',
  ),
  ProductModel(
    id: '24',
    categoryId: '4',
    title: 'Cropped Cardigan',
    imageUrls: [
      'assets/images/7.jpg',
      'assets/images/8.jpg',
      'assets/images/9.jpg',
    ],
    description:
        'Short cropped design. Stylish and chic. Great for high-waist outfits.',
    price: 820.0,
    availableColors: ['Black', 'Grey', 'Beige'],
    availableSizes: [36, 38, 40],
    lapel: 'Short lapel with cropped trendy finish',
  ),

  ProductModel(
    id: '25',
    categoryId: '5',
    title: 'Wool Coat',
    imageUrls: [
      'assets/images/10.jpg',
      'assets/images/11.jpg',
      'assets/images/12.jpg',
    ],
    description:
        'Classic wool coat. Warm and durable. Perfect for cold winter days.',
    price: 1600.0,
    availableColors: ['Grey', 'Black', 'Beige'],
    availableSizes: [38, 40, 42, 44],
    lapel: 'Wide wool lapel with timeless finish',
  ),
  ProductModel(
    id: '26',
    categoryId: '5',
    title: 'Trench Coat',
    imageUrls: [
      'assets/images/13.jpg',
      'assets/images/14.jpg',
      'assets/images/15.jpg',
    ],
    description:
        'Stylish trench coat. Lightweight and elegant. Great for mid-season wear.',
    price: 1750.0,
    availableColors: ['Beige', 'Navy', 'Black'],
    availableSizes: [36, 38, 40, 42, 44],
    lapel: 'Classic trench lapel with belted style',
  ),
  ProductModel(
    id: '27',
    categoryId: '5',
    title: 'Double-Breasted Coat',
    imageUrls: [
      'assets/images/16.jpg',
      'assets/images/17.jpg',
      'assets/images/18.jpg',
    ],
    description:
        'Formal double-breasted coat. Perfect for business or evening wear.',
    price: 1850.0,
    availableColors: ['Black', 'Grey', 'Navy'],
    availableSizes: [38, 40, 42, 44, 46],
    lapel: 'Sharp lapel with double-breasted detail',
  ),
  ProductModel(
    id: '28',
    categoryId: '5',
    title: 'Cape Coat',
    imageUrls: [
      'assets/images/19.jpg',
      'assets/images/20.jpg',
      'assets/images/23.jpg',
    ],
    description:
        'Unique cape design. Modern and chic. Perfect for a statement look.',
    price: 1900.0,
    availableColors: ['Beige', 'Red', 'Black'],
    availableSizes: [36, 38, 40, 42],
    lapel: 'Flowy cape lapel with modern elegance',
  ),
  ProductModel(
    id: '29',
    categoryId: '5',
    title: 'Puffer Coat',
    imageUrls: [
      'assets/images/24.jpg',
      'assets/images/25.jpg',
      'assets/images/26.jpg',
    ],
    description:
        'Cozy padded puffer coat. Lightweight and very warm. Ideal for winter.',
    price: 1500.0,
    availableColors: ['Navy', 'Black', 'Grey'],
    availableSizes: [38, 40, 42, 44, 46],
    lapel: 'Casual lapel with padded winter cut',
  ),
  ProductModel(
    id: '30',
    categoryId: '5',
    title: 'Belted Coat',
    imageUrls: [
      'assets/images/27.jpg',
      'assets/images/28.jpg',
      'assets/images/29.jpg',
    ],
    description:
        'Stylish belted design. Elegant and feminine. Great for formal occasions.',
    price: 1700.0,
    availableColors: ['Beige', 'White', 'Black'],
    availableSizes: [36, 38, 40, 42, 44],
    lapel: 'Feminine lapel with waist belt accent',
  ),

  ProductModel(
    id: '31',
    categoryId: '6',
    title: 'Evening Dress',
    imageUrls: [
      'assets/images/30.jpg',
      'assets/images/31.jpg',
      'assets/images/32.jpg',
    ],
    description:
        'Elegant evening dress. Perfect for parties or special occasions. Flowy and feminine.',
    price: 1400.0,
    availableColors: ['Black', 'Red', 'Navy'],
    availableSizes: [36, 38, 40, 42],
    lapel: 'Deep V-neck lapel with elegant finish',
  ),
  ProductModel(
    id: '32',
    categoryId: '6',
    title: 'Casual Summer Dress',
    imageUrls: [
      'assets/images/1.jpg',
      'assets/images/2.jpg',
      'assets/images/3.jpg',
    ],
    description:
        'Lightweight summer dress. Comfortable and colorful. Great for casual outings.',
    price: 950.0,
    availableColors: ['White', 'Yellow', 'Blue'],
    availableSizes: [36, 38, 40, 42, 44],
    lapel: 'Round lapel with light summer fabric',
  ),
  ProductModel(
    id: '33',
    categoryId: '6',
    title: 'Bodycon Dress',
    imageUrls: [
      'assets/images/4.jpg',
      'assets/images/5.jpg',
      'assets/images/6.jpg',
    ],
    description:
        'Fitted bodycon style. Perfect for night out or special events.',
    price: 1200.0,
    availableColors: ['Red', 'Black', 'Beige'],
    availableSizes: [36, 38, 40, 42],
    lapel: 'Slim lapel with tight bodycon fit',
  ),
  ProductModel(
    id: '34',
    categoryId: '6',
    title: 'Maxi Dress',
    imageUrls: [
      'assets/images/7.jpg',
      'assets/images/8.jpg',
      'assets/images/9.jpg',
    ],
    description:
        'Flowy maxi dress. Elegant and comfortable. Perfect for beach or summer evenings.',
    price: 1100.0,
    availableColors: ['Blue', 'White', 'Pink'],
    availableSizes: [36, 38, 40, 42, 44],
    lapel: 'Long flowy lapel with maxi length',
  ),
  ProductModel(
    id: '35',
    categoryId: '6',
    title: 'Shirt Dress',
    imageUrls: [
      'assets/images/10.jpg',
      'assets/images/11.jpg',
      'assets/images/12.jpg',
    ],
    description:
        'Casual shirt-inspired dress. Comfortable and practical. Perfect for daily wear.',
    price: 1000.0,
    availableColors: ['White', 'Beige', 'Green'],
    availableSizes: [36, 38, 40, 42, 44],
    lapel: 'Collared lapel with shirt-style detail',
  ),
  ProductModel(
    id: '36',
    categoryId: '6',
    title: 'Wrap Dress',
    imageUrls: [
      'assets/images/13.jpg',
      'assets/images/14.jpg',
      'assets/images/15.jpg',
    ],
    description:
        'Flattering wrap design. Feminine and chic. Suitable for casual or formal wear.',
    price: 1150.0,
    availableColors: ['Red', 'Navy', 'Black'],
    availableSizes: [36, 38, 40, 42],
    lapel: 'Wrap-style lapel with tied waist design',
  ),

  ProductModel(
    id: '37',
    categoryId: '7',
    title: 'Denim Jacket',
    imageUrls: [
      'assets/images/16.jpg',
      'assets/images/17.jpg',
      'assets/images/18.jpg',
    ],
    description:
        'Classic denim jacket. Casual and timeless. Perfect for everyday wear.',
    price: 950.0,
    availableColors: ['Blue', 'Black', 'Grey'],
    availableSizes: [36, 38, 40, 42, 44],
    lapel: 'Casual denim lapel with rugged finish',
  ),
  ProductModel(
    id: '38',
    categoryId: '7',
    title: 'Leather Jacket',
    imageUrls: [
      'assets/images/19.jpg',
      'assets/images/20.jpg',
      'assets/images/21.jpg',
    ],
    description:
        'Trendy leather jacket. Bold and stylish. Perfect for night outings.',
    price: 1800.0,
    availableColors: ['Black', 'Brown'],
    availableSizes: [38, 40, 42, 44, 46],
    lapel: 'Sharp leather lapel with edgy cut',
  ),
  ProductModel(
    id: '39',
    categoryId: '7',
    title: 'Bomber Jacket',
    imageUrls: [
      'assets/images/22.jpg',
      'assets/images/23.jpg',
      'assets/images/24.jpg',
    ],
    description:
        'Sporty bomber style. Comfortable and versatile. Great for casual outfits.',
    price: 1200.0,
    availableColors: ['Green', 'Navy', 'Black'],
    availableSizes: [36, 38, 40, 42, 44],
    lapel: 'Ribbed bomber lapel with sporty edge',
  ),
  ProductModel(
    id: '40',
    categoryId: '7',
    title: 'Cropped Jacket',
    imageUrls: [
      'assets/images/25.jpg',
      'assets/images/26.jpg',
      'assets/images/27.jpg',
    ],
    description:
        'Trendy cropped jacket. Modern and chic. Perfect for high-waist looks.',
    price: 1100.0,
    availableColors: ['White', 'Black', 'Beige'],
    availableSizes: [36, 38, 40, 42],
    lapel: 'Short lapel with cropped modern fit',
  ),
  ProductModel(
    id: '41',
    categoryId: '7',
    title: 'Puffer Jacket',
    imageUrls: [
      'assets/images/28.jpg',
      'assets/images/29.jpg',
      'assets/images/30.jpg',
    ],
    description:
        'Warm puffer jacket. Lightweight and protective. Ideal for cold weather.',
    price: 1350.0,
    availableColors: ['Grey', 'Navy', 'Black'],
    availableSizes: [38, 40, 42, 44],
    lapel: 'Thick padded lapel with winter comfort',
  ),
  ProductModel(
    id: '42',
    categoryId: '7',
    title: 'Blazer Jacket',
    imageUrls: [
      'assets/images/31.jpg',
      'assets/images/32.jpg',
      'assets/images/1.jpg',
    ],
    description:
        'Stylish blazer-inspired jacket. Semi-formal look. Great for office or outings.',
    price: 1450.0,
    availableColors: ['Black', 'Beige', 'Navy'],
    availableSizes: [36, 38, 40, 42, 44],
    lapel: 'Tailored lapel with semi-formal structure',
  ),
];



==== FILE: lib\features\home\domain\model\category_model.dart ====
class CategoryModel {
  final String id;
  final String name;
  final String imageUrl;

  const CategoryModel({
    required this.id,
    required this.name,
    required this.imageUrl,
  });
}

class ProductModel {
  final String id;
  final String categoryId;
  final String title;
  final List<String> imageUrls;
  final String description;
  final double price;
  final List<String> availableColors;
  final List<int> availableSizes;
  final String? lapel;

  const ProductModel({
    required this.id,
    required this.categoryId,
    required this.title,
    required this.imageUrls,
    required this.description,
    required this.price,
    this.availableColors = const [],
    this.availableSizes = const [],
    this.lapel,
  });
}

class CartItem {
  final String id;
  final ProductModel product;
  final int quantity;
  final String? selectedColor;
  final int? selectedSize;

  CartItem({
    required this.id,
    required this.product,
    required this.quantity,
    this.selectedColor,
    this.selectedSize,
  });

  CartItem copyWith({int? quantity, String? selectedColor, int? selectedSize}) {
    return CartItem(
      id: id,
      product: product,
      quantity: quantity ?? this.quantity,
      selectedColor: selectedColor ?? this.selectedColor,
      selectedSize: selectedSize ?? this.selectedSize,
    );
  }
}



==== FILE: lib\features\home\domain\model\category_model_adapter.dart ====
import 'package:fig/features/home/domain/model/category_model.dart';
import 'package:hive_flutter/hive_flutter.dart';

class CategoryModelAdapter extends TypeAdapter<CategoryModel> {
  @override
  final int typeId = 0;

  @override
  CategoryModel read(BinaryReader reader) {
    return CategoryModel(
      id: reader.readString(),
      name: reader.readString(),
      imageUrl: reader.readString(),
    );
  }

  @override
  void write(BinaryWriter writer, CategoryModel obj) {
    writer.writeString(obj.id);
    writer.writeString(obj.name);
    writer.writeString(obj.imageUrl);
  }
}

class ProductModelAdapter extends TypeAdapter<ProductModel> {
  @override
  final int typeId = 1;

  @override
  ProductModel read(BinaryReader reader) {
    return ProductModel(
      id: reader.readString(),
      categoryId: reader.readString(),
      title: reader.readString(),
      imageUrls: reader.readList().cast<String>(),
      description: reader.readString(),
      price: reader.readDouble(),
      availableColors: reader.readList().cast<String>(),
      availableSizes: reader.readList().cast<int>(),
      lapel: reader.readBool() ? reader.readString() : null,
    );
  }

  @override
  void write(BinaryWriter writer, ProductModel obj) {
    writer.writeString(obj.id);
    writer.writeString(obj.categoryId);
    writer.writeString(obj.title);
    writer.writeList(obj.imageUrls);
    writer.writeString(obj.description);
    writer.writeDouble(obj.price);
    writer.writeList(obj.availableColors);
    writer.writeList(obj.availableSizes);
    if (obj.lapel != null) {
      writer.writeBool(true);
      writer.writeString(obj.lapel!);
    } else {
      writer.writeBool(false);
    }
  }
}

class CartItemAdapter extends TypeAdapter<CartItem> {
  @override
  final int typeId = 2;

  @override
  CartItem read(BinaryReader reader) {
    return CartItem(
      id: reader.readString(),
      product: reader.read() as ProductModel,
      quantity: reader.readInt(),
      selectedColor: reader.read(),
      selectedSize: reader.read(),
    );
  }

  @override
  void write(BinaryWriter writer, CartItem obj) {
    writer.writeString(obj.id);
    writer.write(obj.product);
    writer.writeInt(obj.quantity);
    writer.write(obj.selectedColor);
    writer.write(obj.selectedSize);
  }
}

class FavoritesAdapter extends TypeAdapter<ProductModel> {
  @override
  final int typeId = 3;

  @override
  ProductModel read(BinaryReader reader) {
    return ProductModel(
      id: reader.readString(),
      categoryId: reader.readString(),
      title: reader.readString(),
      imageUrls: reader.readList().cast<String>(),
      description: reader.readString(),
      price: reader.readDouble(),
      availableColors: reader.readList().cast<String>(),
      availableSizes: reader.readList().cast<int>(),
      lapel: reader.readBool() ? reader.readString() : null,
    );
  }

  @override
  void write(BinaryWriter writer, ProductModel obj) {
    writer.writeString(obj.id);
    writer.writeString(obj.categoryId);
    writer.writeString(obj.title);
    writer.writeList(obj.imageUrls);
    writer.writeString(obj.description);
    writer.writeDouble(obj.price);
    writer.writeList(obj.availableColors);
    writer.writeList(obj.availableSizes);
    if (obj.lapel != null) {
      writer.writeBool(true);
      writer.writeString(obj.lapel!);
    } else {
      writer.writeBool(false);
    }
  }
}

Future<void> initHive() async {
  await Hive.initFlutter();

  Hive.registerAdapter(CategoryModelAdapter());
  Hive.registerAdapter(ProductModelAdapter());
  Hive.registerAdapter(CartItemAdapter());
  Hive.registerAdapter(FavoritesAdapter());

  await Hive.openBox<CategoryModel>('categories');
  await Hive.openBox<ProductModel>('products');
  await Hive.openBox<CartItem>('cart');
  await Hive.openBox<ProductModel>('favorites');
}



==== FILE: lib\features\home\presentation\cubit\home_cubit.dart ====
import 'package:fig/features/home/data/category_data.dart';
import 'package:fig/features/home/data/products_data.dart';
import 'package:fig/features/home/domain/model/category_model.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:fig/features/home/presentation/cubit/home_state.dart';
import 'package:hive/hive.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:uuid/uuid.dart';

class HomeCubit extends Cubit<HomeState> {
  HomeCubit() : super(const HomeState()) {
    loadInitialData();
  }

  Future<void> fetchCategories() async {
    emit(state.copyWith(isLoadingCategories: true, categoriesError: null));
    await Future.delayed(const Duration(seconds: 2));

    try {
      emit(
        state.copyWith(isLoadingCategories: false, categories: allCategories),
      );
    } catch (e) {
      emit(
        state.copyWith(
          isLoadingCategories: false,
          categoriesError: 'ŸÅÿ¥ŸÑ ÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑÿ£ŸÇÿ≥ÿßŸÖ',
        ),
      );
    }
  }

  void selectCategory(String categoryId) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString('selectedCategoryId', categoryId);

    emit(state.copyWith(selectedCategoryId: categoryId));
    filterProductsByCategory(categoryId);
  }

  Future<void> fetchProducts() async {
    emit(state.copyWith(isLoadingProducts: true, productsError: null));
    await Future.delayed(const Duration(seconds: 2));

    try {
      List<ProductModel> products = allProducts;
      final prefs = await SharedPreferences.getInstance();
      String? savedSortOption = prefs.getString('currentSortOption');

      if (savedSortOption == 'Lowest Price') {
        products.sort((a, b) => a.price.compareTo(b.price));
      } else if (savedSortOption == 'Highest Price') {
        products.sort((a, b) => b.price.compareTo(a.price));
      }

      emit(
        state.copyWith(
          isLoadingProducts: false,
          allProducts: allProducts,
          filteredProducts: products,
          currentSortOption: savedSortOption,
        ),
      );
    } catch (e) {
      emit(
        state.copyWith(
          isLoadingProducts: false,
          productsError: "ŸÅÿ¥ŸÑ ÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™",
        ),
      );
    }
  }

  void filterProductsByCategory(String categoryId) {
    final filtered =
        state.allProducts.where((p) => p.categoryId == categoryId).toList();
    emit(state.copyWith(filteredProducts: filtered));
  }

  void showAllProducts() {
    emit(
      state.copyWith(
        filteredProducts: state.allProducts,
        selectedCategoryId: null,
      ),
    );
  }

  Future<void> sortProducts(String sortOption) async {
    List<ProductModel> sorted = List.from(state.allProducts);

    if (sortOption == 'Lowest Price') {
      sorted.sort((a, b) => a.price.compareTo(b.price));
    } else if (sortOption == 'Highest Price') {
      sorted.sort((a, b) => b.price.compareTo(a.price));
    }

    final prefs = await SharedPreferences.getInstance();
    await prefs.setString('currentSortOption', sortOption);

    emit(
      state.copyWith(filteredProducts: sorted, currentSortOption: sortOption),
    );
  }

  Future<void> loadInitialData() async {
    final cartBox = Hive.box<CartItem>('cart');
    final favoritesBox = Hive.box<ProductModel>('favorites');
    final productsBox = Hive.box<ProductModel>('products');

    // ŸÉŸÑ ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™
    List<ProductModel> allProducts = productsBox.values.toList();

    // ÿßÿ≥ÿ™ÿ±ÿ¨ÿßÿπ ÿßŸÑÿßÿπÿØÿßÿØÿßÿ™ ÿßŸÑÿ≥ÿßÿ®ŸÇÿ©
    final prefs = await SharedPreferences.getInstance();
    String? savedSortOption = prefs.getString('currentSortOption');
    String? savedCategoryId = prefs.getString('selectedCategoryId');

    // ÿ™ÿµŸÅŸäÿ© ÿ≠ÿ≥ÿ® ÿßŸÑŸÅÿ¶ÿ© ŸÑŸà ŸÖŸàÿ¨ŸàÿØÿ©
    List<ProductModel> filteredProducts =
        savedCategoryId == null
            ? List.from(allProducts)
            : allProducts
                .where((p) => p.categoryId == savedCategoryId)
                .toList();

    // ÿ™ÿ±ÿ™Ÿäÿ® ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™
    if (savedSortOption == 'Lowest Price') {
      filteredProducts.sort((a, b) => a.price.compareTo(b.price));
    } else if (savedSortOption == 'Highest Price') {
      filteredProducts.sort((a, b) => b.price.compareTo(a.price));
    }

    // ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑŸÄ state
    emit(
      state.copyWith(
        cart: cartBox.values.toList(),
        favorites: favoritesBox.values.toList(),
        allProducts: allProducts,
        filteredProducts: filteredProducts,
        currentSortOption: savedSortOption,
        selectedCategoryId: savedCategoryId,
      ),
    );
  }

  void toggleFavorite(ProductModel product) async {
    final box = Hive.box<ProductModel>('favorites');
    final exists = box.values.any((p) => p.id == product.id);

    if (exists) {
      final key = box.keys.firstWhere((k) => box.get(k)!.id == product.id);
      await box.delete(key);
    } else {
      await box.add(product);
    }

    emit(state.copyWith(favorites: box.values.toList()));
  }

  bool isFavorite(ProductModel product) {
    final box = Hive.box<ProductModel>('favorites');
    return box.values.any((p) => p.id == product.id);
  }

  void addToCart(ProductModel product) async {
    final box = Hive.box<CartItem>('cart');
    final newItem = CartItem(id: Uuid().v4(), product: product, quantity: 1);
    await box.add(newItem);
    emit(state.copyWith(cart: box.values.toList()));
  }

  void removeFromCartById(String cartItemId) async {
    final box = Hive.box<CartItem>('cart');
    final key = box.keys.firstWhere((k) => box.get(k)!.id == cartItemId);
    await box.delete(key);
    emit(state.copyWith(cart: box.values.toList()));
  }

  void updateCartQuantity(String cartItemId, int quantity) async {
    final box = Hive.box<CartItem>('cart');
    final key = box.keys.firstWhere((k) => box.get(k)!.id == cartItemId);
    final item = box.get(key)!;
    await box.put(key, item.copyWith(quantity: quantity));
    emit(state.copyWith(cart: box.values.toList()));
  }
}



==== FILE: lib\features\home\presentation\cubit\home_state.dart ====
import 'package:fig/features/home/domain/model/category_model.dart';

class HomeState {
  final bool isLoadingCategories;
  final bool isLoadingProducts;
  final String? categoriesError;
  final String? productsError;
  final List<CategoryModel> categories;
  final List<ProductModel> allProducts;
  final List<ProductModel> filteredProducts;
  final List<ProductModel> favorites;
  final String? selectedCategoryId;
  final String? currentSortOption;
  final List<CartItem> cart;

  const HomeState({
    this.isLoadingCategories = false,
    this.isLoadingProducts = false,
    this.categoriesError,
    this.productsError,
    this.categories = const [],
    this.allProducts = const [],
    this.filteredProducts = const [],
    this.favorites = const [],
    this.selectedCategoryId,
    this.currentSortOption,
    this.cart = const [],
  });

  HomeState copyWith({
    bool? isLoadingCategories,
    bool? isLoadingProducts,
    String? categoriesError,
    String? productsError,
    List<CategoryModel>? categories,
    List<ProductModel>? allProducts,
    List<ProductModel>? filteredProducts,
    List<ProductModel>? favorites,
    String? selectedCategoryId,
    String? currentSortOption,
    List<CartItem>? cart,
  }) {
    return HomeState(
      isLoadingCategories: isLoadingCategories ?? this.isLoadingCategories,
      isLoadingProducts: isLoadingProducts ?? this.isLoadingProducts,
      categoriesError: categoriesError ?? this.categoriesError,
      productsError: productsError ?? this.productsError,
      categories: categories ?? this.categories,
      allProducts: allProducts ?? this.allProducts,
      filteredProducts: filteredProducts ?? this.filteredProducts,
      favorites: favorites ?? this.favorites,
      selectedCategoryId: selectedCategoryId ?? this.selectedCategoryId,
      currentSortOption: currentSortOption ?? this.currentSortOption,
      cart: cart ?? this.cart,
    );
  }
}



==== FILE: lib\features\home\presentation\pages\categories_and_products_screen.dart ====
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:fig/features/home/presentation/cubit/home_cubit.dart';
import 'package:fig/features/home/presentation/cubit/home_state.dart';
import 'package:fig/core/widgets/shimmer_skeletons.dart';
import 'package:fig/features/home/domain/model/category_model.dart';

class CategoriesAndProductsScreen extends StatelessWidget {
  const CategoriesAndProductsScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.grey[200],

      body: BlocBuilder<HomeCubit, HomeState>(
        builder: (context, state) {
          if (state.isLoadingCategories || state.isLoadingProducts) {
            return const ProductOrCategoryCardShimmer();
          }

          if (state.categoriesError != null) {
            return Center(child: Text(state.categoriesError!));
          }
          if (state.productsError != null) {
            return Center(child: Text(state.productsError!));
          }

          final allItems = [
            ...state.categories.map((c) => {"type": "category", "data": c}),
            ...state.filteredProducts.map(
              (p) => {"type": "product", "data": p},
            ),
          ];

          return ListView.builder(
            padding: const EdgeInsets.all(16),
            itemCount: allItems.length,
            itemBuilder: (context, index) {
              final item = allItems[index];

              return Container(
                height: 100,
                margin: const EdgeInsets.symmetric(vertical: 8),
                decoration: BoxDecoration(
                  color: Colors.grey[300],
                  borderRadius: BorderRadius.circular(16),
                ),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    ClipRRect(
                      borderRadius: const BorderRadius.only(
                        topLeft: Radius.circular(16),
                        bottomLeft: Radius.circular(16),
                      ),
                      child: Padding(
                        padding: const EdgeInsets.all(8.0),
                        child: ClipRRect(
                          borderRadius: BorderRadius.circular(15),
                          child:
                              item["type"] == "product"
                                  ? ((item["data"] as ProductModel)
                                          .imageUrls
                                          .isNotEmpty
                                      ? Image.asset(
                                        (item["data"] as ProductModel)
                                            .imageUrls
                                            .first,
                                        width: 100,
                                        height: 100,
                                        fit: BoxFit.cover,
                                      )
                                      : Container(
                                        width: 100,
                                        height: 100,
                                        color: Colors.grey[400],
                                        child: const Icon(
                                          Icons.shopping_bag,
                                          size: 32,
                                          color: Colors.white,
                                        ),
                                      ))
                                  : ((item["data"] as CategoryModel)
                                          .imageUrl
                                          .isNotEmpty
                                      ? Image.asset(
                                        (item["data"] as CategoryModel)
                                            .imageUrl,
                                        width: 100,
                                        height: 100,
                                        fit: BoxFit.cover,
                                      )
                                      : Container(
                                        width: 100,
                                        height: 100,
                                        color: Colors.grey[400],
                                        child: const Icon(
                                          Icons.category,
                                          size: 32,
                                          color: Colors.white,
                                        ),
                                      )),
                        ),
                      ),
                    ),

                    Padding(
                      padding: const EdgeInsets.symmetric(
                        horizontal: 16,
                        vertical: 8,
                      ),
                      child: Text(
                        item["type"] == "category"
                            ? (item["data"] as CategoryModel).name
                            : (item["data"] as ProductModel).title,
                        style: const TextStyle(
                          fontSize: 16,
                          fontWeight: FontWeight.bold,
                        ),
                        maxLines: 1,
                        overflow: TextOverflow.ellipsis,
                      ),
                    ),
                  ],
                ),
              );
            },
          );
        },
      ),
    );
  }
}



==== FILE: lib\features\home\presentation\pages\category_products_page_Screen.dart ====
import 'package:fig/core/widgets/common_widgets.dart';
import 'package:fig/features/home/domain/model/category_model.dart';
import 'package:fig/features/home/presentation/cubit/home_cubit.dart';
import 'package:fig/features/home/presentation/cubit/home_state.dart';
import 'package:fig/features/home/widgets/home_widget.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:fig/core/widgets/shimmer_skeletons.dart';

class CategoryProductsScreen extends StatefulWidget {
  final CategoryModel category;

  const CategoryProductsScreen({super.key, required this.category});

  @override
  State<CategoryProductsScreen> createState() => _CategoryProductsScreenState();
}

class _CategoryProductsScreenState extends State<CategoryProductsScreen> {
  bool isGrid = true;
  bool forceShowShimmer = true;

  @override
  void initState() {
    super.initState();
    Future.delayed(const Duration(seconds: 3), () {
      if (mounted) {
        setState(() {
          forceShowShimmer = false;
        });
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    final filtered =
        context
            .watch<HomeCubit>()
            .state
            .filteredProducts
            .where((p) => p.categoryId == widget.category.id)
            .toList();

    return Scaffold(
      backgroundColor: Colors.white,
      appBar: AppBar(
        title: Text(
          'Product List (${filtered.length} products)',
          style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
        ),
        backgroundColor: Colors.white,
        elevation: 0,
        surfaceTintColor: Colors.transparent,
        actions: [IconButton(icon: const Icon(Icons.search), onPressed: () {})],
        bottom: PreferredSize(
          preferredSize: const Size.fromHeight(1.0),
          child: Container(color: Colors.grey.shade600, height: 1.0),
        ),
      ),

      body: Column(
        children: [
          Padding(
            padding: const EdgeInsets.only(left: 10),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                TextButton.icon(
                  onPressed: () => _showSortBottomSheet(context),
                  icon: const Icon(Icons.sort, color: Colors.black),
                  label: const Text(
                    'Sort',
                    style: TextStyle(color: Colors.black),
                  ),
                ),
                Row(
                  mainAxisAlignment: MainAxisAlignment.end,
                  children: [
                    IconButton(
                      icon: Icon(
                        Icons.view_list,
                        color: !isGrid ? Colors.red[900] : Colors.black,
                      ),
                      onPressed: () {
                        setState(() {
                          isGrid = false;
                        });
                      },
                    ),
                    IconButton(
                      icon: Icon(
                        Icons.grid_view,
                        color: isGrid ? Colors.red[900] : Colors.black,
                      ),
                      onPressed: () {
                        setState(() {
                          isGrid = true;
                        });
                      },
                    ),
                  ],
                ),
              ],
            ),
          ),
          buildReusableDivider(),
          Expanded(
            child: BlocBuilder<HomeCubit, HomeState>(
              builder: (context, state) {
                if (state.productsError != null) {
                  return Center(child: Text(state.productsError!));
                }

                if (forceShowShimmer || state.isLoadingProducts) {
                  return isGrid
                      ? const ProductGridShimmer()
                      : const ProductListShimmer();
                }

                final filtered =
                    state.filteredProducts
                        .where((p) => p.categoryId == widget.category.id)
                        .toList();

                if (filtered.isEmpty) {
                  return const Center(child: Text('No products found'));
                }

                return isGrid
                    ? GridView.builder(
                      padding: const EdgeInsets.all(5),
                      itemCount: filtered.length,
                      gridDelegate:
                          const SliverGridDelegateWithFixedCrossAxisCount(
                            crossAxisCount: 2,
                            crossAxisSpacing: 15,
                            mainAxisSpacing: 6,
                            childAspectRatio: 0.5,
                          ),
                      itemBuilder: (context, index) {
                        final product = filtered[index];
                        return _buildGridProduct(product);
                      },
                    )
                    : ListView.separated(
                      padding: const EdgeInsets.all(6),
                      itemCount: filtered.length,
                      separatorBuilder: (_, __) => const SizedBox(height: 12),
                      itemBuilder: (context, index) {
                        final product = filtered[index];
                        return _buildListProduct(product);
                      },
                    );
              },
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildGridProduct(ProductModel product) {
    return GridProductView(product: product);
  }

  Widget _buildListProduct(ProductModel product) {
    return ListProductView(product: product);
  }
}

void _showSortBottomSheet(BuildContext context) {
  showModalBottomSheet(
    context: context,
    shape: const RoundedRectangleBorder(
      borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
    ),
    builder: (context) {
      return BlocBuilder<HomeCubit, HomeState>(
        builder: (context, state) {
          final selected = state.currentSortOption;

          return Padding(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    GestureDetector(
                      onTap: () => Navigator.pop(context),
                      child: const Text(
                        'Cancel',
                        style: TextStyle(fontWeight: FontWeight.bold),
                      ),
                    ),
                    Row(
                      children: const [
                        Icon(Icons.swap_vert),
                        SizedBox(width: 3),
                        Text(
                          'SORT',
                          style: TextStyle(fontWeight: FontWeight.bold),
                        ),
                      ],
                    ),
                    GestureDetector(
                      onTap: () {
                        Navigator.pop(context);
                      },
                      child: Text(
                        'Apply',
                        style: TextStyle(
                          color: Colors.red[600],
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 16),
                const Divider(),
                _buildSortOption(context, 'Recommended Sorting', selected),
                const Divider(),
                _buildSortOption(context, 'Lowest Price', selected),
                const Divider(),
                _buildSortOption(context, 'Highest Price', selected),
              ],
            ),
          );
        },
      );
    },
  );
}

Widget _buildSortOption(BuildContext context, String title, String? selected) {
  return ListTile(
    title: Text(title),
    trailing:
        selected == title ? const Icon(Icons.check, color: Colors.green) : null,
    onTap: () {
      context.read<HomeCubit>().sortProducts(title);
      Navigator.pop(context);
    },
  );
}



==== FILE: lib\features\home\presentation\pages\home_page.dart ====
import 'dart:async';
import 'package:fig/core/widgets/shimmer_skeletons.dart';
import 'package:fig/features/home/presentation/cubit/home_cubit.dart';
import 'package:fig/features/home/presentation/cubit/home_state.dart';
import 'package:fig/features/home/widgets/carousel_widget.dart';
import 'package:fig/features/home/widgets/category_list_widget.dart';
import 'package:fig/features/home/widgets/product_list_widget.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

class HomePage extends StatefulWidget {
  const HomePage({super.key});

  @override
  State<HomePage> createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  final PageController _pageController = PageController();
  int _currentPage = 0;
  Timer? _timer;
  Timer? _textTimer;

  final List<String> carouselImages = [
    'assets/images/2.jpg',
    'assets/images/3.jpg',
    'assets/images/4.jpg',
    'assets/images/5.jpg',
  ];

  final List<String> introTexts = [
    'Start your journey with us now!',
    'How Can I Help You?',
    'hey,üëã',
  ];

  int _currentTextIndex = 0;

  @override
  void initState() {
    super.initState();
    _startAutoSlide();
    _textTimer = Timer.periodic(const Duration(seconds: 3), (timer) {
      setState(() {
        _currentTextIndex = (_currentTextIndex + 1) % introTexts.length;
      });
    });

    // ÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™
    context.read<HomeCubit>().fetchCategories();
    context.read<HomeCubit>().fetchProducts();
  }

  void _startAutoSlide() {
    _timer = Timer.periodic(const Duration(seconds: 3), (Timer timer) {
      if (_pageController.hasClients) {
        int nextPage = _currentPage + 1;
        if (nextPage >= carouselImages.length) {
          _pageController.jumpToPage(0);
          nextPage = 0;
        } else {
          _pageController.animateToPage(
            nextPage,
            duration: const Duration(milliseconds: 500),
            curve: Curves.easeInOut,
          );
        }
        setState(() {
          _currentPage = nextPage;
        });
      }
    });
  }

  @override
  void dispose() {
    _timer?.cancel();
    _textTimer?.cancel();
    _pageController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return SafeArea(
      child: Scaffold(
        backgroundColor: Colors.white,
        body: SingleChildScrollView(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Center(
                child: AnimatedSwitcher(
                  duration: const Duration(milliseconds: 800),
                  transitionBuilder:
                      (child, animation) =>
                          FadeTransition(opacity: animation, child: child),
                  child: Text(
                    introTexts[_currentTextIndex],
                    key: ValueKey(_currentTextIndex),
                    style: const TextStyle(
                      fontSize: 16,
                      fontWeight: FontWeight.bold,
                      color: Colors.black,
                    ),
                  ),
                ),
              ),
              const SizedBox(height: 16),

              // Search bar
              Padding(
                padding: const EdgeInsets.symmetric(horizontal: 16.0),
                child: Container(
                  padding: const EdgeInsets.symmetric(horizontal: 16),
                  decoration: BoxDecoration(
                    color: Colors.white,
                    borderRadius: BorderRadius.circular(30),
                    boxShadow: [
                      BoxShadow(
                        color: Colors.black.withOpacity(0.3),
                        blurRadius: 8,
                        offset: const Offset(0, 4),
                      ),
                    ],
                  ),
                  child: const TextField(
                    decoration: InputDecoration(
                      icon: Icon(Icons.search),
                      hintText: 'Search Product',
                      border: InputBorder.none,
                    ),
                  ),
                ),
              ),
              const SizedBox(height: 24),

              Stack(
                children: [
                  CarouselWidget(
                    pageController: _pageController,
                    images: carouselImages,
                    scrollDirection: Axis.horizontal,

                    onPageChanged: (i) => setState(() => _currentPage = i),
                  ),
                  Positioned(
                    bottom: 8,
                    left: 0,
                    right: 0,
                    child: CarouselIndicator(
                      itemCount: carouselImages.length,
                      currentPage: _currentPage,
                    ),
                  ),
                ],
              ),

              const SizedBox(height: 16),

              BlocBuilder<HomeCubit, HomeState>(
                builder: (context, state) {
                  // && state.categories.isEmpty
                  if (state.isLoadingCategories) {
                    return const CategoryRowShimmer();
                  } else if (state.categoriesError != null) {
                    return Center(child: Text(state.categoriesError!));
                  } else {
                    return CategoryListWidget(categories: state.categories);
                  }
                },
              ),
              const SizedBox(height: 16),

              BlocBuilder<HomeCubit, HomeState>(
                builder: (context, state) {
                  //&& state.filteredProducts.isEmpty
                  if (state.isLoadingProducts) {
                    return const CategoryRowShimmer();
                  } else if (state.productsError != null) {
                    return Center(child: Text(state.productsError!));
                  } else {
                    return ProductListWidget(products: state.filteredProducts);
                  }
                },
              ),

              ListView(
                shrinkWrap: true,
                physics: NeverScrollableScrollPhysics(),
                children: List.generate(16, (index) {
                  return Container(
                    height: 200,
                    margin: const EdgeInsets.symmetric(vertical: 8),
                    decoration: BoxDecoration(
                      borderRadius: BorderRadius.circular(16),
                      color: Colors.transparent,
                    ),
                    child: ClipRRect(
                      borderRadius: BorderRadius.circular(16),
                      child: Image.asset(
                        'assets/images/1.jpg',
                        fit: BoxFit.cover,
                        width: double.infinity,
                        height: double.infinity,
                      ),
                    ),
                  );
                }),
              ),
            ],
          ),
        ),
      ),
    );
  }
}



==== FILE: lib\features\home\presentation\pages\Product_detials_Page.dart ====
import 'package:fig/features/home/domain/model/category_model.dart';
import 'package:fig/features/home/presentation/cubit/home_cubit.dart';
import 'package:fig/features/home/widgets/add_to_cart_button.dart';
import 'package:fig/features/home/widgets/carousel_widget.dart';
import 'package:fig/features/home/widgets/product_info_section.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:share_plus/share_plus.dart';

class ProductDetailsScreen extends StatefulWidget {
  final ProductModel product;

  const ProductDetailsScreen({super.key, required this.product});

  @override
  State<ProductDetailsScreen> createState() => _ProductDetailsScreenState();
}

class _ProductDetailsScreenState extends State<ProductDetailsScreen> {
  late PageController _pageController;

  int _selectedImage = 0;
  String? _selectedColor;
  int? _selectedSize;

  late final List<String> colors;
  late final List<int> sizes;

  late DraggableScrollableController _draggableController;
  bool _isExpanded = false;

  @override
  void initState() {
    super.initState();
    _pageController = PageController(initialPage: _selectedImage);
    _draggableController = DraggableScrollableController();
    colors = widget.product.availableColors;
    sizes = widget.product.availableSizes;
  }

  void _togglePanel() {
    if (_isExpanded) {
      _draggableController.animateTo(
        0.42,
        duration: const Duration(milliseconds: 300),
        curve: Curves.easeInOut,
      );
    } else {
      _draggableController.animateTo(
        0.65,
        duration: const Duration(milliseconds: 300),
        curve: Curves.easeInOut,
      );
    }

    setState(() {
      _isExpanded = !_isExpanded;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.white,
      appBar: AppBar(
        title: Text(widget.product.title),
        backgroundColor: Colors.white,
        elevation: 0,
        iconTheme: const IconThemeData(color: Colors.black),
      ),
      body: Stack(
        children: [
          Stack(
            children: [
              CarouselWidget(
                pageController: _pageController,
                images: widget.product.imageUrls,
                height: 400,
                scrollDirection: Axis.vertical,
                onPageChanged:
                    (index) => setState(() => _selectedImage = index),
              ),

              Positioned(
                left:
                    Directionality.of(context) == TextDirection.rtl ? 8 : null,
                right:
                    Directionality.of(context) == TextDirection.ltr ? 8 : null,
                top: 0,
                bottom: 0,
                child: CarouselIndicator(
                  itemCount: widget.product.imageUrls.length,
                  currentPage: _selectedImage,
                  direction: Axis.vertical,
                  size: 8,
                  spacing: 4,
                  activeColor: Colors.red,
                  inactiveColor: Colors.grey,
                ),
              ),
            ],
          ),

          DraggableScrollableSheet(
            controller: _draggableController,
            initialChildSize: 0.42,
            minChildSize: 0.42,
            maxChildSize: 0.65,
            builder: (context, scrollController) {
              return Stack(
                clipBehavior: Clip.none,
                children: [
                  Container(
                    decoration: BoxDecoration(
                      color: Colors.white,
                      borderRadius: const BorderRadius.vertical(
                        top: Radius.circular(20),
                      ),
                      boxShadow: [
                        BoxShadow(
                          color: Colors.black26,
                          blurRadius: 8,
                          offset: Offset(0, -2),
                        ),
                      ],
                    ),
                    child: SingleChildScrollView(
                      controller: scrollController,
                      padding: const EdgeInsets.symmetric(
                        horizontal: 16,
                        vertical: 12,
                      ),
                      child: ProductInfoSection(
                        sizes: sizes,
                        colors: colors,
                        selectedSize: _selectedSize,
                        selectedColor: _selectedColor,
                        onSizeSelected:
                            (size) => setState(() => _selectedSize = size),
                        onColorSelected:
                            (color) => setState(() => _selectedColor = color),
                        shortDescription: '',
                        fullDescription: widget.product.description,
                        title: widget.product.title,
                        price: widget.product.price.toString(),
                        lapel: widget.product.lapel ?? '',
                      ),
                    ),
                  ),

                  Positioned(
                    top: -6,
                    left: 0,
                    right: 0,
                    child: Center(
                      child: GestureDetector(
                        onTap: _togglePanel,
                        child: Container(
                          width: 60,
                          height: 20,
                          decoration: BoxDecoration(
                            borderRadius: BorderRadius.circular(20.0),
                            color: Colors.white,
                            boxShadow: const [
                              BoxShadow(
                                color: Colors.black26,
                                blurRadius: 2,
                                offset: Offset(0, 1),
                              ),
                            ],
                          ),
                          child: Icon(
                            _isExpanded
                                ? Icons.keyboard_arrow_down
                                : Icons.keyboard_arrow_up,
                            size: 20,
                            color: Colors.black54,
                          ),
                        ),
                      ),
                    ),
                  ),
                ],
              );
            },
          ),
        ],
      ),
      bottomNavigationBar: Container(
        color: Colors.white,
        child: Padding(
          padding: const EdgeInsets.only(
            top: 10,
            bottom: 20,
            left: 20,
            right: 20,
          ),
          child: Row(
            children: [
              Expanded(
                child: AddToCartButton(
                  product: widget.product,
                  isEnabled: _selectedColor != null && _selectedSize != null,
                ),
              ),

              const SizedBox(width: 10),
              IconButton(
                onPressed: () {
                  context.read<HomeCubit>().toggleFavorite(widget.product);
                },
                icon: Builder(
                  builder: (context) {
                    bool isFav = context.watch<HomeCubit>().isFavorite(
                      widget.product,
                    );
                    return Icon(
                      isFav ? Icons.favorite : Icons.favorite_border,
                      color: isFav ? Colors.red : Colors.black,
                      size: 28,
                    );
                  },
                ),
              ),
              IconButton(
                onPressed: () {
                  Share.share(
                    'ÿ¥ŸàŸÅ ÿßŸÑŸÖŸÜÿ™ÿ¨ ÿØŸá: ${widget.product.title} - ÿßŸÑÿ≥ÿπÿ±: ${widget.product.price} EGP',
                    subject: 'ŸÖŸÜÿ™ÿ¨ ÿ¨ÿØŸäÿØ!',
                  );
                },
                icon: const Icon(Icons.share, color: Colors.black, size: 28),
              ),
            ],
          ),
        ),
      ),
    );
  }
}



==== FILE: lib\features\home\widgets\add_to_cart_button.dart ====
import 'package:fig/features/home/domain/model/category_model.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:fig/features/home/presentation/cubit/home_cubit.dart';
import 'package:fig/features/home/widgets/snack_bar_widget.dart';

class AddToCartButton extends StatelessWidget {
  final ProductModel product;
  final bool isEnabled;
  final bool popAfterAdd; 

  const AddToCartButton({
    super.key,
    required this.product,
    required this.isEnabled,
    this.popAfterAdd = true,
  });

  @override
  Widget build(BuildContext context) {
    return SizedBox(
      width: double.infinity,
      child: ElevatedButton(
        onPressed: () {
          if (!isEnabled) {
            TopSnackBar.show(
              context,
              message: 'Choose Color And Size.',
              icon: Icons.error_outline,
            );
            return;
          }

          context.read<HomeCubit>().addToCart(product);

          TopSnackBar.show(
            context,
            message: 'Added to cart successfully!',
            icon: Icons.check_circle_outline,
          );

          if (popAfterAdd) {
            Navigator.pop(context);
          }
        },
        style: ElevatedButton.styleFrom(
          backgroundColor: isEnabled ? Colors.red : Colors.grey.shade400,
          padding: const EdgeInsets.symmetric(vertical: 14),
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),
        ),
        child: Text(
          isEnabled ? "Add to Cart" : "Choose Color And Size.",
          style: const TextStyle(
            color: Colors.white,
            fontSize: 18,
            fontWeight: FontWeight.bold,
          ),
        ),
      ),
    );
  }
}



==== FILE: lib\features\home\widgets\carousel_widget.dart ====
import 'package:flutter/material.dart';

class CarouselWidget extends StatelessWidget {
  final PageController pageController;
  final List<String> images;
  final Axis scrollDirection;
  final double height;
  final double borderRadius;
  final bool showBorderRadius;
  final Function(int)? onPageChanged;

  const CarouselWidget({
    super.key,
    required this.pageController,
    required this.images,
    this.scrollDirection = Axis.horizontal,
    this.height = 200,
    this.borderRadius = 12,
    this.showBorderRadius = true,
    this.onPageChanged,
  });

  @override
  Widget build(BuildContext context) {
    return SizedBox(
      height: height,
      child: PageView.builder(
        controller: pageController,
        scrollDirection: scrollDirection,
        itemCount: images.length,
        onPageChanged: onPageChanged,
        itemBuilder: (context, index) {
          final image = Image.asset(
            images[index],
            fit: BoxFit.cover,
            width: double.infinity,
          );

          return showBorderRadius
              ? ClipRRect(
                borderRadius: BorderRadius.circular(borderRadius),
                child: image,
              )
              : image;
        },
      ),
    );
  }
}

class CarouselIndicator extends StatelessWidget {
  final int itemCount;
  final int currentPage;
  final Axis direction; // horizontal ÿ£Ÿà vertical
  final Alignment alignment; // ŸÖŸÉÿßŸÜ ÿßŸÑŸÖÿ§ÿ¥ÿ±
  final Color activeColor;
  final Color inactiveColor;
  final double size; // ÿ≠ÿ¨ŸÖ ÿßŸÑŸÖÿ§ÿ¥ÿ±
  final double spacing; // ÿßŸÑŸÖÿ≥ÿßŸÅÿ© ÿ®ŸäŸÜ ÿßŸÑŸÖÿ§ÿ¥ÿ±ÿßÿ™

  const CarouselIndicator({
    super.key,
    required this.itemCount,
    required this.currentPage,
    this.direction = Axis.horizontal,
    this.alignment = Alignment.bottomCenter,
    this.activeColor = Colors.red,
    this.inactiveColor = const Color(0xFFFF8A80),
    this.size = 12,
    this.spacing = 4,
  });

  @override
  Widget build(BuildContext context) {
    final indicators = List.generate(
      itemCount,
      (index) => AnimatedContainer(
        duration: const Duration(milliseconds: 300),
        margin:
            direction == Axis.horizontal
                ? EdgeInsets.symmetric(horizontal: spacing)
                : EdgeInsets.symmetric(vertical: spacing),
        width: size,
        height: size,
        decoration: BoxDecoration(
          color: currentPage == index ? activeColor : inactiveColor,
          borderRadius: BorderRadius.circular(size / 2),
        ),
      ),
    );

    return Align(
      alignment: alignment,
      child:
          direction == Axis.horizontal
              ? Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: indicators,
              )
              : Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: indicators,
              ),
    );
  }
}



==== FILE: lib\features\home\widgets\category_list_widget.dart ====
import 'package:fig/features/home/domain/model/category_model.dart';
import 'package:flutter/material.dart';
import 'package:fig/features/home/presentation/pages/category_products_page_Screen.dart';

class CategoryListWidget extends StatelessWidget {
  final List<CategoryModel> categories;

  const CategoryListWidget({super.key, required this.categories});

  @override
  Widget build(BuildContext context) {
    return SizedBox(
      height: 100,
      child: ListView.separated(
        scrollDirection: Axis.horizontal,
        padding: const EdgeInsets.symmetric(horizontal: 12),
        itemCount: categories.length,
        separatorBuilder: (_, __) => const SizedBox(width: 12),
        itemBuilder: (context, index) {
          final category = categories[index];
          return GestureDetector(
            onTap: () {
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder:
                      (context) => CategoryProductsScreen(category: category),
                ),
              );
            },
            child: Column(
              children: [
                ClipOval(
                  child: Image.asset(
                    category.imageUrl,
                    width: 50,
                    height: 50,
                    fit: BoxFit.cover,
                  ),
                ),
                const SizedBox(height: 6),
                Text(category.name, style: const TextStyle(fontSize: 12)),
              ],
            ),
          );
        },
      ),
    );
  }
}



==== FILE: lib\features\home\widgets\colors_selector.dart ====
import 'package:flutter/material.dart';

Color parseColor(String color) {
  switch (color.toLowerCase()) {
    case 'black':
      return Colors.black;
    case 'red':
      return Colors.red;
    case 'navy':
      return Colors.blue;
    case 'green':
      return Colors.green;
    case 'beige':
      return Color(0xFFF5F5DC);
    case 'white':
      return Colors.white;
    case 'grey':
      return Colors.grey;
    default:
      return Colors.grey;
  }
}

class ColorsSelector extends StatelessWidget {
  final List<String> colors;
  final String? selectedColor;
  final ValueChanged<String> onColorSelected;

  const ColorsSelector({
    super.key,
    required this.colors,
    required this.selectedColor,
    required this.onColorSelected,
  });

  @override
  Widget build(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text("Colors:", style: TextStyle(fontWeight: FontWeight.bold)),
        const SizedBox(height: 10),
        Wrap(
          spacing: 8,
          children:
              colors.map((color) {
                final isSelected = selectedColor == color;
                return GestureDetector(
                  onTap: () => onColorSelected(color),
                  child: Container(
                    width: 32,
                    height: 32,
                    decoration: BoxDecoration(
                      color: parseColor(color),
                      shape: BoxShape.circle,
                      border:
                          isSelected
                              ? Border.all(color: Colors.black, width: 2)
                              : null,
                    ),
                  ),
                );
              }).toList(),
        ),
      ],
    );
  }
}



==== FILE: lib\features\home\widgets\home_widget.dart ====
import 'package:fig/features/home/domain/model/category_model.dart';
import 'package:fig/features/home/presentation/cubit/home_cubit.dart';
import 'package:fig/features/home/presentation/pages/Product_detials_Page.dart';
import 'package:fig/features/home/widgets/product_quick_review_sheet.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:smooth_page_indicator/smooth_page_indicator.dart';

abstract class ProductView extends StatefulWidget {
  final ProductModel product;
  const ProductView({super.key, required this.product});
}

abstract class ProductViewState<T extends ProductView> extends State<T> {
  late final PageController pageController;

  @override
  void initState() {
    super.initState();
    pageController = PageController();
  }

  @override
  void dispose() {
    pageController.dispose();
    super.dispose();
  }

  Widget buildImageWithIcons(
    BuildContext context,
    String imageUrl, {
    bool showSecondIcon = true,
  }) {
    final isFavorite = context.watch<HomeCubit>().isFavorite(widget.product);

    return Stack(
      fit: StackFit.expand,
      children: [
        Image.asset(imageUrl, fit: BoxFit.cover),
        Positioned(
          top: 20,
          right: 10,
          bottom: 20,
          child: Column(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              IconButton(
                icon: Icon(
                  isFavorite ? Icons.favorite : Icons.favorite_border,
                  color: isFavorite ? Colors.red : Colors.white,
                  size: 30,
                ),
                onPressed: () {
                  context.read<HomeCubit>().toggleFavorite(widget.product);
                },
              ),
              if (showSecondIcon)
                IconButton(
                  icon: const Icon(
                    Icons.shopping_bag,
                    color: Colors.white,
                    size: 25,
                  ),
                  onPressed: () {
                    showModalBottomSheet(
                      context: context,
                      isScrollControlled: true,
                      shape: const RoundedRectangleBorder(
                        borderRadius: BorderRadius.vertical(
                          top: Radius.circular(20),
                        ),
                      ),
                      builder:
                          (_) =>
                              ProductQuickReviewSheet(product: widget.product),
                    );
                  },
                ),
            ],
          ),
        ),
      ],
    );
  }

  Widget buildImages();

  Widget buildProductInfo();

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: () {
        Navigator.push(
          context,
          MaterialPageRoute(
            builder: (context) => ProductDetailsScreen(product: widget.product),
          ),
        );
      },
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          buildImages(),
          const SizedBox(height: 4),
          Center(
            child: SmoothPageIndicator(
              controller: pageController,
              count: widget.product.imageUrls.length,
              effect: WormEffect(
                dotHeight: 5,
                dotWidth: 15,
                activeDotColor: Colors.red[900]!,
                dotColor: Colors.grey.shade300,
              ),
            ),
          ),
          const SizedBox(height: 6),
          buildProductInfo(),
        ],
      ),
    );
  }
}

class GridProductView extends ProductView {
  final bool showSecondIcon;

  const GridProductView({
    super.key,
    required super.product,
    this.showSecondIcon = true,
  });

  @override
  State<GridProductView> createState() => _GridProductViewState();
}

class _GridProductViewState extends ProductViewState<GridProductView> {
  @override
  Widget buildImages() {
    return Container(
      height: 255,
      clipBehavior: Clip.antiAlias,
      decoration: const BoxDecoration(color: Colors.white),
      child: PageView.builder(
        controller: pageController,
        itemCount: widget.product.imageUrls.length,
        onPageChanged: (index) {
          if (index == widget.product.imageUrls.length - 1) {
            Future.delayed(const Duration(milliseconds: 1500), () {
              pageController.jumpToPage(0);
            });
          }
        },
        itemBuilder: (context, index) {
          return buildImageWithIcons(
            context,
            widget.product.imageUrls[index],
            showSecondIcon: widget.showSecondIcon,
          );
        },
      ),
    );
  }

  @override
  Widget buildProductInfo() {
    return Column(
      children: [
        Text(
          widget.product.title,
          style: const TextStyle(fontSize: 13, fontWeight: FontWeight.bold),
          maxLines: 1,
          overflow: TextOverflow.ellipsis,
          textAlign: TextAlign.center,
        ),
        const SizedBox(height: 4),
        Text(
          '${widget.product.price.toStringAsFixed(2)} EGP',
          style: const TextStyle(
            fontSize: 13,
            color: Colors.black,
            fontWeight: FontWeight.w500,
          ),
        ),
      ],
    );
  }
}

class ListProductView extends ProductView {
  const ListProductView({super.key, required super.product});

  @override
  State<ListProductView> createState() => _ListProductViewState();
}

class _ListProductViewState extends ProductViewState<ListProductView> {
  @override
  Widget buildImages() {
    return SizedBox(
      height: 450,
      child: PageView.builder(
        controller: pageController,
        itemCount: widget.product.imageUrls.length,
        itemBuilder: (context, index) {
          return buildImageWithIcons(context, widget.product.imageUrls[index]);
        },
      ),
    );
  }

  @override
  Widget buildProductInfo() {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 12),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const SizedBox(height: 8),
          Text(
            widget.product.title,
            style: const TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
            maxLines: 1,
            overflow: TextOverflow.ellipsis,
          ),
          const SizedBox(height: 4),
          Text(
            '${widget.product.price.toStringAsFixed(2)} EGP',
            style: const TextStyle(
              fontSize: 15,
              fontWeight: FontWeight.w500,
              color: Colors.black87,
            ),
          ),
          const SizedBox(height: 12),
        ],
      ),
    );
  }
}



==== FILE: lib\features\home\widgets\product_info_section.dart ====
import 'package:fig/core/widgets/common_widgets.dart';
import 'package:flutter/material.dart';
import 'package:fig/features/home/widgets/colors_selector.dart';
import 'package:fig/features/home/widgets/sizes_selector.dart';

class ProductInfoSection extends StatelessWidget {
  final List<int> sizes;
  final List<String> colors;
  final int? selectedSize;
  final String? selectedColor;
  final ValueChanged<int> onSizeSelected;
  final ValueChanged<String> onColorSelected;
  final String shortDescription;
  final String fullDescription;
  final String title;
  final String price;
  final String lapel;

  const ProductInfoSection({
    super.key,
    required this.sizes,
    required this.colors,
    this.selectedSize,
    this.selectedColor,
    required this.onSizeSelected,
    required this.onColorSelected,
    required this.shortDescription,
    required this.fullDescription,
    required this.title,
    required this.price,
    required this.lapel,
  });

  @override
  Widget build(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            Expanded(
              child: Text(
                title,
                style: const TextStyle(
                  fontSize: 22,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ),
            Text(
              '${price} EGP',
              style: const TextStyle(
                fontSize: 20,
                fontWeight: FontWeight.bold,
                color: Colors.black,
              ),
            ),
          ],
        ),
        const SizedBox(height: 6),

        Text(lapel, style: const TextStyle(fontSize: 16, color: Colors.grey)),
        buildReusableDivider(),
        // Sizes Selector
        SizesSelector(
          sizes: sizes,
          selectedSize: selectedSize,
          onSizeSelected: onSizeSelected,
        ),
        const SizedBox(height: 20),

        // Colors Selector
        ColorsSelector(
          colors: colors,
          selectedColor: selectedColor,
          onColorSelected: onColorSelected,
        ),
        const SizedBox(height: 18),

        const Text(
          "Product Short Description",
          style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
        ),
        const SizedBox(height: 10),
        Text(
          shortDescription,
          style: const TextStyle(
            fontSize: 16,
            color: Colors.black87,
            height: 1.4,
          ),
        ),

        const Text(
          "Product Full Description",
          style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
        ),
        const SizedBox(height: 10),
        Text(
          fullDescription,
          style: const TextStyle(
            fontSize: 16,
            color: Colors.black87,
            height: 1.4,
          ),
        ),

        // Return Section
        Row(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            const Text(
              "Return Within 30 Days",
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.w500),
            ),
            const SizedBox(width: 8),
            Transform(
              alignment: Alignment.center,
              transform: Matrix4.rotationY(3.1416),
              child: const Icon(Icons.replay, color: Colors.black54, size: 24),
            ),
          ],
        ),
        const SizedBox(height: 18),

        // Payment Options Section
        const Text(
          "Payment Options",
          style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
        ),
        const SizedBox(height: 18),

        Row(
          children: const [
            Icon(Icons.payments, color: Colors.yellow, size: 24),
            SizedBox(width: 8),
            Text(
              "Paying Cash On Delivery",
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.w400),
            ),
          ],
        ),
        const SizedBox(height: 8),
        Row(
          children: const [
            Icon(Icons.payment, color: Colors.blue, size: 24),
            SizedBox(width: 8),
            Text(
              "Card Payment",
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.w400),
            ),
          ],
        ),
      ],
    );
  }
}



==== FILE: lib\features\home\widgets\product_list_widget.dart ====
import 'package:fig/features/home/domain/model/category_model.dart';
import 'package:flutter/material.dart';

class ProductListWidget extends StatelessWidget {
  final List<ProductModel> products;

  const ProductListWidget({super.key, required this.products});

  @override
  Widget build(BuildContext context) {
    return SizedBox(
      height: 100,
      child: ListView.separated(
        scrollDirection: Axis.horizontal,
        padding: const EdgeInsets.symmetric(horizontal: 12),
        itemCount: products.length,
        separatorBuilder: (_, __) => const SizedBox(width: 12),
        itemBuilder: (context, index) {
          final product = products[index];
          return Column(
            children: [
              ClipOval(
                child: Image.asset(
                  product.imageUrls[0],
                  width: 50,
                  height: 50,
                  fit: BoxFit.cover,
                ),
              ),
              const SizedBox(height: 6),
              Text(product.title, style: const TextStyle(fontSize: 12)),
            ],
          );
        },
      ),
    );
  }
}



==== FILE: lib\features\home\widgets\product_quick_review_sheet.dart ====
import 'package:fig/features/home/widgets/add_to_cart_button.dart';
import 'package:fig/features/home/widgets/colors_selector.dart';
import 'package:fig/features/home/widgets/sizes_selector.dart';
import 'package:flutter/material.dart';
import 'package:fig/features/home/domain/model/category_model.dart';
import 'package:fig/features/home/presentation/pages/Product_detials_Page.dart';

class ProductQuickReviewSheet extends StatefulWidget {
  final ProductModel product;
  const ProductQuickReviewSheet({super.key, required this.product});

  @override
  State<ProductQuickReviewSheet> createState() =>
      _ProductQuickReviewSheetState();
}

class _ProductQuickReviewSheetState extends State<ProductQuickReviewSheet> {
  String? selectedColor;
  int? selectedSize;

  @override
  Widget build(BuildContext context) {
    return SingleChildScrollView(
      child: Column(
        children: [
          Container(
            color: Colors.grey.shade300,
            child: Padding(
              padding: const EdgeInsets.symmetric(horizontal: 10),
              child: _buildHeader(context),
            ),
          ),
          Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            mainAxisSize: MainAxisSize.max,
            children: [
              SizedBox(height: 5),
              Padding(
                padding: const EdgeInsets.symmetric(horizontal: 10),
                child: _buildProductInfo(),
              ),
              const SizedBox(height: 20),
              Padding(
                padding: const EdgeInsets.symmetric(horizontal: 15),
                child: SizesSelector(
                  sizes: widget.product.availableSizes,
                  selectedSize: selectedSize,
                  onSizeSelected: (size) {
                    setState(() => selectedSize = size);
                  },
                ),
              ),
              const SizedBox(height: 20),
              Padding(
                padding: const EdgeInsets.symmetric(horizontal: 15),
                child: ColorsSelector(
                  colors: widget.product.availableColors,
                  selectedColor: selectedColor,
                  onColorSelected: (color) {
                    setState(() => selectedColor = color);
                  },
                ),
              ),
              const SizedBox(height: 30),
              _buildGoToDetails(context),
              const SizedBox(height: 16),
              Padding(
                padding: const EdgeInsets.symmetric(horizontal: 10),
                child: AddToCartButton(
                  product: widget.product,
                  isEnabled: selectedColor != null && selectedSize != null,
                ),
              ),
              const SizedBox(height: 16),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildHeader(BuildContext context) => Row(
    mainAxisAlignment: MainAxisAlignment.spaceBetween,
    children: [
      const Text(
        "Quick Review",
        style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
      ),
      TextButton(
        onPressed: () => Navigator.pop(context),
        child: Text(
          "Cancel",
          style: TextStyle(fontSize: 18, color: Colors.red[900]),
        ),
      ),
    ],
  );

  Widget _buildProductInfo() => Row(
    crossAxisAlignment: CrossAxisAlignment.start,
    children: [
      ClipRRect(
        borderRadius: BorderRadius.circular(12),
        child: Image.asset(
          widget.product.imageUrls.first,
          height: 120,
          width: 100,
          fit: BoxFit.cover,
        ),
      ),

      SizedBox(width: 15),
      Expanded(
        child: SizedBox(
          height: 120,
          child: Padding(
            padding: const EdgeInsets.symmetric(vertical: 10),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  widget.product.lapel ?? '',
                  style: const TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.bold,
                  ),
                  maxLines: 2,
                  overflow: TextOverflow.ellipsis,
                ),
                Text(
                  '${widget.product.price} EGP',
                  style: const TextStyle(
                    fontSize: 18,
                    color: Colors.black,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    ],
  );

  Widget _buildGoToDetails(BuildContext context) => Center(
    child: GestureDetector(
      onTap: () {
        Navigator.pop(context);
        Navigator.push(
          context,
          MaterialPageRoute(
            builder: (_) => ProductDetailsScreen(product: widget.product),
          ),
        );
      },
      child: const Text(
        "Go to Product Details",
        style: TextStyle(
          fontSize: 16,
          decoration: TextDecoration.underline,
          fontWeight: FontWeight.bold,
        ),
      ),
    ),
  );
}



==== FILE: lib\features\home\widgets\sizes_selector.dart ====
import 'package:flutter/material.dart';

class SizesSelector extends StatelessWidget {
  final List<int> sizes;
  final int? selectedSize;
  final ValueChanged<int> onSizeSelected;

  const SizesSelector({
    super.key,
    required this.sizes,
    required this.selectedSize,
    required this.onSizeSelected,
  });

  @override
  Widget build(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text("Sizes:", style: TextStyle(fontWeight: FontWeight.bold)),
        const SizedBox(height: 10),
        Wrap(
          spacing: 8,
          runSpacing: 8,
          children:
              sizes.map((size) {
                final isSelected = selectedSize == size;
                return GestureDetector(
                  onTap: () => onSizeSelected(size),
                  child: Container(
                    padding: const EdgeInsets.symmetric(
                      horizontal: 12,
                      vertical: 8,
                    ),
                    decoration: BoxDecoration(
                      color:
                          isSelected ? Colors.red[300] : Colors.grey.shade200,
                      borderRadius: BorderRadius.circular(8),
                    ),
                    child: Text(
                      size.toString(),
                      style: TextStyle(
                        color: isSelected ? Colors.white : Colors.black,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),
                );
              }).toList(),
        ),
      ],
    );
  }
}



==== FILE: lib\features\home\widgets\snack_bar_widget.dart ====
import 'package:flutter/material.dart';

class TopSnackBar {
  static void show(
    BuildContext context, {
    required String message,
    IconData icon = Icons.info,
    Color backgroundColor = Colors.teal,
    Duration duration = const Duration(seconds: 2),
  }) {
    final overlay = Overlay.of(context);
    late OverlayEntry overlayEntry;

    overlayEntry = OverlayEntry(
      builder: (context) {
        return _TopSnackBarWidget(
          message: message,
          icon: icon,
          backgroundColor: backgroundColor,
          onDismiss: () => overlayEntry.remove(),
          duration: duration,
        );
      },
    );

    overlay.insert(overlayEntry);
  }
}

class _TopSnackBarWidget extends StatefulWidget {
  final String message;
  final IconData icon;
  final Color backgroundColor;
  final VoidCallback onDismiss;
  final Duration duration;

  const _TopSnackBarWidget({
    required this.message,
    required this.icon,
    required this.backgroundColor,
    required this.onDismiss,
    required this.duration,
  });

  @override
  State<_TopSnackBarWidget> createState() => _TopSnackBarWidgetState();
}

class _TopSnackBarWidgetState extends State<_TopSnackBarWidget>
    with TickerProviderStateMixin {
  late AnimationController _slideController;
  late Animation<Offset> _slideAnimation;

  late AnimationController _blinkController;
  late Animation<double> _blinkAnimation;

  @override
  void initState() {
    super.initState();

    _slideController = AnimationController(
      vsync: this,
      duration: const Duration(milliseconds: 300),
    );

    _slideAnimation = Tween<Offset>(
      begin: const Offset(0, -1),
      end: Offset.zero,
    ).animate(CurvedAnimation(parent: _slideController, curve: Curves.easeOut));

    _slideController.forward();

    _blinkController = AnimationController(
      vsync: this,
      duration: const Duration(milliseconds: 500),
    )..repeat(reverse: true);

    _blinkAnimation = Tween<double>(begin: 0.3, end: 1.0).animate(
      CurvedAnimation(parent: _blinkController, curve: Curves.easeInOut),
    );

    Future.delayed(widget.duration, () {
      dismiss();
    });
  }

  void dismiss() {
    _slideController.reverse().then((value) => widget.onDismiss());
  }

  @override
  void dispose() {
    _slideController.dispose();
    _blinkController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Positioned(
      top: 0,
      left: 0,
      right: 0,
      child: SlideTransition(
        position: _slideAnimation,
        child: Material(
          color: widget.backgroundColor,
          elevation: 4,
          child: SafeArea(
            child: Container(
              padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
              child: Row(
                children: [
                  FadeTransition(
                    opacity: _blinkAnimation,
                    child: Icon(widget.icon, color: Colors.white, size: 30),
                  ),
                  const SizedBox(width: 20),
                  Expanded(
                    child: Text(
                      widget.message,
                      style: const TextStyle(color: Colors.white, fontSize: 16),
                    ),
                  ),
                  TextButton(
                    onPressed: dismiss,
                    child: const Text(
                      'Close',
                      style: TextStyle(
                        color: Colors.white,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }
}



==== FILE: lib\features\home\widgets\test.dart ====




==== FILE: lib\features\Navigation\presentation\cubit\navigation_cubit.dart ====
import 'package:flutter_bloc/flutter_bloc.dart';

class NavigationCubit extends Cubit<int> {
  NavigationCubit() : super(0);

  void changeTab(int index) => emit(index);
}



==== FILE: lib\features\Navigation\presentation\pages\main_screen.dart ====
import 'package:easy_localization/easy_localization.dart';
import 'package:fig/features/Basket/basket_screen.dart';
import 'package:fig/features/Favorites/presentation/pages/favorites_Screen.dart';
import 'package:fig/features/Navigation/presentation/cubit/navigation_cubit.dart';
import 'package:fig/features/home/presentation/pages/categories_and_products_screen.dart';
import 'package:fig/features/home/presentation/pages/home_page.dart';
import 'package:fig/features/profile/presentation/pages/profile_page.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

class MainScreen extends StatelessWidget {
  const MainScreen({super.key});

  static const List<Widget> _screens = [
    HomePage(),
    CategoriesAndProductsScreen(),
    CartScreen(),
    FavoritesScreen(),
    ProfilePage(),
  ];

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<NavigationCubit, int>(
      builder: (context, currentIndex) {
        return Scaffold(
          body: _screens[currentIndex],
          bottomNavigationBar: Builder(
            builder: (context) {
              final _ = context.locale;

              return BottomNavigationBar(
                currentIndex: currentIndex,
                type: BottomNavigationBarType.fixed,
                selectedItemColor: Colors.red[900],
                unselectedItemColor: Colors.black87,
                onTap: (index) {
                  context.read<NavigationCubit>().changeTab(index);
                },
                items: [
                  BottomNavigationBarItem(
                    icon: const Icon(Icons.home),
                    label: 'home'.tr(),
                  ),
                  BottomNavigationBarItem(
                    icon: const Icon(Icons.category),
                    label: 'categories'.tr(),
                  ),
                  BottomNavigationBarItem(
                    icon: const Icon(Icons.shopping_basket),
                    label: 'basket'.tr(),
                  ),
                  BottomNavigationBarItem(
                    icon: const Icon(Icons.favorite),
                    label: 'favorites'.tr(),
                  ),
                  BottomNavigationBarItem(
                    icon: const Icon(Icons.person),
                    label: 'profile'.tr(),
                  ),
                ],
              );
            },
          ),
        );
      },
    );
  }
}



==== FILE: lib\features\profile\presentation\cubit\profile_cubit.dart ====
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'profile_state.dart';

class ProfileCubit extends Cubit<ProfileState> {
  ProfileCubit() : super(ProfileState.initial());

  Future<void> login({
    required String username,
    required String email,
    required String password,
  }) async {
    emit(state.copyWith(isLoading: true, errorMessage: null));
    await Future.delayed(const Duration(seconds: 2));

    if (email == "test@test.com" && password == "123456") {
      emit(
        state.copyWith(
          status: ProfileStatus.loggedIn,
          username: username,
          email: email,
          isLoading: false,
        ),
      );
    } else {
      emit(
        state.copyWith(
          isLoading: false,
          errorMessage: "Email or password is incorrect",
        ),
      );
    }
  }

  Future<void> signUp({
    required String username,
    required String email,
    required String password,
    required String confirmPassword,
  }) async {
    emit(state.copyWith(isLoading: true, errorMessage: null));
    await Future.delayed(const Duration(seconds: 2));

    if (password != confirmPassword) {
      emit(
        state.copyWith(
          isLoading: false,
          errorMessage: "The password and confirmation do not match.",
        ),
      );
      return;
    }

    if (email.endsWith("@test.com")) {
      emit(
        state.copyWith(
          status: ProfileStatus.signedUp,
          username: username,
          email: email,
          isLoading: false,
        ),
      );
    } else {
      emit(
        state.copyWith(isLoading: false, errorMessage: "Email is not allowed"),
      );
    }
  }

  void logout() => emit(ProfileState.initial());
}

class AuthTabCubit extends Cubit<int> {
  AuthTabCubit() : super(0);
  void changeTab(int index) => emit(index);
}

class LocaleCubit extends Cubit<Locale> {
  LocaleCubit() : super(const Locale('en'));
  void changeLocale(Locale locale) => emit(locale);
}

class LoginVisibilityCubit extends Cubit<bool> {
  LoginVisibilityCubit() : super(false);
  void toggleVisibility() => emit(!state);
}

class SignUpVisibilityCubit extends Cubit<SignUpVisibilityState> {
  SignUpVisibilityCubit()
    : super(
        const SignUpVisibilityState(
          isPasswordVisible: false,
          isConfirmPasswordVisible: false,
        ),
      );

  void togglePasswordVisibility() {
    emit(state.copyWith(isPasswordVisible: !state.isPasswordVisible));
  }

  void toggleConfirmPasswordVisibility() {
    emit(
      state.copyWith(isConfirmPasswordVisible: !state.isConfirmPasswordVisible),
    );
  }
}

class SignUpVisibilityState {
  final bool isPasswordVisible;
  final bool isConfirmPasswordVisible;

  const SignUpVisibilityState({
    required this.isPasswordVisible,
    required this.isConfirmPasswordVisible,
  });

  SignUpVisibilityState copyWith({
    bool? isPasswordVisible,
    bool? isConfirmPasswordVisible,
  }) {
    return SignUpVisibilityState(
      isPasswordVisible: isPasswordVisible ?? this.isPasswordVisible,
      isConfirmPasswordVisible:
          isConfirmPasswordVisible ?? this.isConfirmPasswordVisible,
    );
  }
}

class LanguageCubit extends Cubit<String> {
  LanguageCubit(super.initialLang);

  void selectLanguage(String languageCode) {
    emit(languageCode);
  }
}



==== FILE: lib\features\profile\presentation\cubit\profile_state.dart ====
enum ProfileStatus { loggedOut, loggedIn, signedUp }

class ProfileState {
  final ProfileStatus status;
  final String username;
  final String email;
  final bool isLoading;
  final String? errorMessage;

  ProfileState({
    required this.status,
    required this.username,
    required this.email,
    this.isLoading = false,
    this.errorMessage,
  });

  factory ProfileState.initial() {
    return ProfileState(
      status: ProfileStatus.loggedOut,
      username: '',
      email: '',
      isLoading: false,
      errorMessage: null,
    );
  }

  ProfileState copyWith({
    ProfileStatus? status,
    String? username,
    String? email,
    bool? isLoading,
    String? errorMessage,
  }) {
    return ProfileState(
      status: status ?? this.status,
      username: username ?? this.username,
      email: email ?? this.email,
      isLoading: isLoading ?? this.isLoading,
      errorMessage: errorMessage ?? this.errorMessage,
    );
  }
}



==== FILE: lib\features\profile\presentation\pages\language_selection_page.dart ====
import 'package:fig/core/utils/responsive.dart';
import 'package:fig/core/widgets/common_widgets.dart';
import 'package:fig/core/widgets/custom_button.dart';
import 'package:fig/features/profile/presentation/cubit/profile_cubit.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:easy_localization/easy_localization.dart';

class LanguageSelectionPage extends StatelessWidget {
  const LanguageSelectionPage({super.key});

  @override
  Widget build(BuildContext context) {
    final currentLang = context.locale.languageCode;

    return BlocProvider(
      create: (_) => LanguageCubit(currentLang),
      child: Scaffold(
        appBar: AppBar(title: Text('select_language'.tr())),
        body: Column(
          children: [
            Expanded(
              child: ListView(
                children: [
                  Container(
                    padding: EdgeInsets.all(8),
                    height: 50,
                    color: Colors.grey.shade400,
                    child: Text(
                      'Egypt'.tr(),
                      style: TextStyle(
                        fontSize: 20.rt(context),
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),
                  _buildLanguageTile(context, 'en', 'English'),
                  buildReusableDivider(),
                  _buildLanguageTile(context, 'ar', 'ÿßŸÑÿπÿ±ÿ®Ÿäÿ©'),
                  buildReusableDivider(),
                ],
              ),
            ),
            Padding(
              padding: const EdgeInsets.all(16),
              child: BlocBuilder<LanguageCubit, String>(
                builder: (context, selectedLangCode) {
                  return PrimaryButton(
                    label: 'apply'.tr(),
                    backgroundColor: Colors.red[700],
                    foregroundColor: Colors.white,
                    onPressed: () {
                      context.setLocale(Locale(selectedLangCode));
                      Navigator.pop(context);
                    },
                  );
                },
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildLanguageTile(
    BuildContext context,
    String languageCode,
    String label,
  ) {
    return BlocBuilder<LanguageCubit, String>(
      builder: (context, selectedLangCode) {
        final isSelected = selectedLangCode == languageCode;

        return InkWell(
          onTap: () {
            context.read<LanguageCubit>().selectLanguage(languageCode);
            context.setLocale(Locale(languageCode));
          },
          child: Padding(
            padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Text(label, style: const TextStyle(fontSize: 18)),
                isSelected
                    ? Container(
                      width: 24,
                      height: 24,
                      decoration: const BoxDecoration(
                        color: Color(0xFFD32F2F),
                        shape: BoxShape.circle,
                      ),
                      child: const Icon(
                        Icons.check,
                        color: Colors.white,
                        size: 16,
                      ),
                    )
                    : Container(
                      width: 24,
                      height: 24,
                      decoration: BoxDecoration(
                        border: Border.all(color: Colors.grey),
                        shape: BoxShape.circle,
                      ),
                    ),
              ],
            ),
          ),
        );
      },
    );
  }
}



==== FILE: lib\features\profile\presentation\pages\profile_page.dart ====
import 'package:easy_localization/easy_localization.dart';
import 'package:fig/core/widgets/common_widgets.dart';
import 'package:fig/core/widgets/custom_button.dart';
import 'package:fig/features/home/widgets/snack_bar_widget.dart';
import 'package:fig/features/profile/presentation/pages/language_selection_page.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_spinkit/flutter_spinkit.dart';
import '../cubit/profile_cubit.dart';
import '../cubit/profile_state.dart';
import '../widgets/profile_logged_in_view.dart';
import '../widgets/profile_logged_out_view.dart';

class ProfilePage extends StatelessWidget {
  const ProfilePage({super.key});

  @override
  Widget build(BuildContext context) {
    return BlocProvider(
      create: (_) => ProfileCubit(),
      child: Scaffold(
        backgroundColor: Colors.white,
        appBar: AppBar(
          title: Text('profile'.tr()),
          backgroundColor: Colors.white,
          elevation: 0,
          surfaceTintColor: Colors.transparent,
        ),
        body: SafeArea(
          child: SingleChildScrollView(
            child: Column(
              children: [
                Padding(
                  padding: const EdgeInsets.only(top: 0, left: 20, right: 20),
                  child: Image.asset('assets/images/7.jpg', height: 150),
                ),

                BlocConsumer<ProfileCubit, ProfileState>(
                  listener: (context, state) {
                    if (state.errorMessage != null) {
                      TopSnackBar.show(
                        context,
                        message: state.errorMessage!,
                        icon: Icons.error,
                        backgroundColor: Colors.red,
                      );
                    }

                    if (state.status == ProfileStatus.loggedIn &&
                        !state.isLoading) {
                      TopSnackBar.show(
                        context,
                        message: "login_success".tr(),
                        icon: Icons.check_circle,
                        backgroundColor: Colors.green,
                      );
                    }

                    if (state.status == ProfileStatus.signedUp &&
                        !state.isLoading) {
                      TopSnackBar.show(
                        context,
                        message: "signup_success".tr(),
                        icon: Icons.person_add,
                        backgroundColor: Colors.green,
                      );
                    }

                    if (state.status == ProfileStatus.loggedOut &&
                        !state.isLoading) {
                      TopSnackBar.show(
                        context,
                        message: "logout_success".tr(),
                        icon: Icons.exit_to_app,
                        backgroundColor: Colors.blueGrey,
                      );
                    }
                  },
                  builder: (context, state) {
                    return Stack(
                      children: [
                        state.status == ProfileStatus.loggedIn
                            ? ProfileLoggedInView(
                              username: state.username,
                              email: state.email,
                            )
                            : const ProfileLoggedOutView(),

                        if (state.isLoading)
                          Positioned.fill(
                            child: Container(
                              color: Colors.black.withAlpha(
                                (0.3 * 255).round(),
                              ),
                              child: Center(
                                child: Center(
                                  child: SpinKitSpinningLines(
                                    size: 60,
                                    color: Colors.white,
                                  ),
                                ),
                              ),
                            ),
                          ),
                      ],
                    );
                  },
                ),

                alignedText(
                  isBold: true,
                  text: "fig_support".tr(),
                  style: const TextStyle(fontSize: 20, color: Colors.black),
                ),
                const SizedBox(height: 10),

                PrimaryButton(
                  label: 'contact_form'.tr(),
                  onPressed: () {},
                  foregroundColor: Colors.black,
                  borderColor: Colors.grey,
                  icon: Icons.contact_page,
                  iconAtEnd: false,
                  fontWeight: FontWeight.normal,
                ),
                const SizedBox(height: 10),

                PrimaryButton(
                  label: 'contact_phone'.tr(),
                  fontWeight: FontWeight.normal,
                  onPressed: () {},
                  foregroundColor: Colors.black,
                  borderColor: Colors.grey,
                  icon: Icons.phone,
                  iconAtEnd: false,
                ),

                const SizedBox(height: 10),
                alignedText(
                  isBold: true,
                  text: 'language_selection'.tr(),
                  style: const TextStyle(fontSize: 20, color: Colors.black),
                ),

                const SizedBox(height: 10),

                PrimaryButton(
                  label:
                      context.locale.languageCode == 'ar'
                          ? 'ÿßŸÑÿπÿ±ÿ®Ÿäÿ©'
                          : 'English',
                  onPressed: () {
                    Navigator.push(
                      context,
                      MaterialPageRoute(
                        builder: (context) => const LanguageSelectionPage(),
                      ),
                    );
                  },
                  foregroundColor: Colors.black,
                  fontWeight: FontWeight.normal,
                  borderColor: Colors.grey,
                  icon: Icons.language,
                  iconAtEnd: false,
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}



==== FILE: lib\features\profile\presentation\widgets\extra_buttons.dart ====
import 'package:easy_localization/easy_localization.dart';
import 'package:fig/core/utils/responsive.dart';
import 'package:fig/core/widgets/common_widgets.dart';
import 'package:fig/features/profile/presentation/cubit/profile_cubit.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

class ExtraButtonsForLoginOnly extends StatelessWidget {
  const ExtraButtonsForLoginOnly({super.key});
  @override
  Widget build(BuildContext context) {
    return Builder(
      builder: (context) {
        context.locale;

        return BlocBuilder<AuthTabCubit, int>(
          builder: (context, index) {
            if (index != 0) return const SizedBox();

            return Column(
              children: [
                _buildRow(
                  context: context,
                  label: tr('order_tracking'),
                  onTap: () {
                    // TODO
                  },
                ),
                buildReusableDivider(),
                _buildRow(
                  context: context,
                  label: tr('help'),
                  onTap: () {
                    // TODO
                  },
                ),
                buildReusableDivider(),
              ],
            );
          },
        );
      },
    );
  }

  Widget _buildRow({
    required BuildContext context,
    required String label,
    required VoidCallback onTap,
  }) {
    return InkWell(
      onTap: onTap,
      borderRadius: BorderRadius.zero,
      splashColor: Colors.grey.withOpacity(0.2),
      child: Padding(
        padding: EdgeInsets.symmetric(
          horizontal: 16.rw(context),
          vertical: 12.rh(context),
        ),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            Text(
              label,
              style: TextStyle(
                color: Colors.black87,
                fontSize: 16.rt(context),
                fontWeight: FontWeight.w400,
              ),
            ),
            const Icon(Icons.arrow_forward_ios, size: 16, color: Colors.black),
          ],
        ),
      ),
    );
  }
}



==== FILE: lib\features\profile\presentation\widgets\login_form.dart ====
import 'package:easy_localization/easy_localization.dart';
import 'package:fig/core/widgets/custom_button.dart';
import 'package:fig/features/profile/presentation/cubit/profile_cubit.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

class LoginForm extends StatelessWidget {
  const LoginForm({super.key});

  @override
  Widget build(BuildContext context) {
    context.locale;
    final emailController = TextEditingController();
    final passwordController = TextEditingController();

    return BlocProvider(
      create: (_) => LoginVisibilityCubit(),
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            BuildTextField(
              hint: 'email_hint'.tr(),
              controller: emailController,
              validator: (value) {
                if (value == null || value.isEmpty) {
                  return 'email_required'.tr();
                }
                if (!value.contains('@')) return 'email_invalid'.tr();
                return null;
              },
              keyboardType: TextInputType.emailAddress,
            ),

            const SizedBox(height: 16),

            BlocBuilder<LoginVisibilityCubit, bool>(
              builder: (context, isPasswordVisible) {
                return BuildTextField(
                  hint: 'password_hint'.tr(),
                  controller: passwordController,
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'password_required'.tr();
                    }
                    return null;
                  },
                  obscureText: !isPasswordVisible,
                  showToggleIcon: true,
                  isPasswordVisible: isPasswordVisible,
                  onToggle:
                      () =>
                          context
                              .read<LoginVisibilityCubit>()
                              .toggleVisibility(),
                );
              },
            ),

            const SizedBox(height: 24),

            PrimaryButton(
              backgroundColor: Colors.red.shade700,
              label: 'login'.tr(),
              onPressed: () {
                context.read<ProfileCubit>().login(
                  username: "User", // ŸÖŸÖŸÉŸÜ ÿ®ÿπÿØŸäŸÜ ÿ™ÿ¨Ÿäÿ®Ÿá ŸÖŸÜ TextField
                  email: emailController.text.trim(),
                  password: passwordController.text.trim(),
                );
              },
            ),
            const SizedBox(height: 20),

            Text(
              "no_account".tr(),
              style: const TextStyle(
                fontSize: 18,
                fontWeight: FontWeight.normal,
                color: Colors.black54,
              ),
            ),
            const SizedBox(height: 20),

            PrimaryButton(
              label: 'create_account'.tr(),
              foregroundColor: Colors.black,
              onPressed: () {
                context.read<AuthTabCubit>().changeTab(1);
              },
              borderColor: Colors.black26,
            ),
          ],
        ),
      ),
    );
  }
}





// import 'package:easy_localization/easy_localization.dart';
// import 'package:fig/core/widgets/custom_button.dart';
// import 'package:fig/features/profile/presentation/cubit/auth_tab_cubit.dart';
// import 'package:fig/features/profile/presentation/cubit/profile_cubit.dart';
// import 'package:flutter/material.dart';
// import 'package:flutter_bloc/flutter_bloc.dart';

// class LoginForm extends StatelessWidget {
//   const LoginForm({super.key});

//   @override
//   Widget build(BuildContext context) {
//     context.locale;
//     final emailController = TextEditingController();
//     final passwordController = TextEditingController();

//     return BlocProvider(
//       create: (_) => LoginVisibilityCubit(),
//       child: Padding(
//         padding: const EdgeInsets.all(16.0),
//         child: Column(
//           children: [
//             BuildTextField(
//               hint: 'email_hint'.tr(),
//               controller: emailController,
//               validator: (value) {
//                 if (value == null || value.isEmpty) {
//                   return 'email_required'.tr();
//                 }
//                 if (!value.contains('@')) return 'email_invalid'.tr();
//                 return null;
//               },
//               keyboardType: TextInputType.emailAddress,
//             ),

//             const SizedBox(height: 16),

//             BlocBuilder<LoginVisibilityCubit, bool>(
//               builder: (context, isPasswordVisible) {
//                 return BuildTextField(
//                   hint: 'password_hint'.tr(),
//                   controller: passwordController,
//                   validator: (value) {
//                     if (value == null || value.isEmpty) {
//                       return 'password_required'.tr();
//                     }

//                     return null;
//                   },
//                   obscureText: !isPasswordVisible,
//                   showToggleIcon: true,
//                   isPasswordVisible: isPasswordVisible,
//                   onToggle:
//                       () =>
//                           context
//                               .read<LoginVisibilityCubit>()
//                               .toggleVisibility(),
//                 );
//               },
//             ),

//             const SizedBox(height: 24),

//             PrimaryButton(
//               backgroundColor: Colors.red.shade700,
//               label: 'login'.tr(),
//               onPressed: () {
//  context.read<ProfileCubit>().login(
//       username: "User", 
//       email: emailController.text.trim(),
//       password: passwordController.text.trim(),
//           );



//               },
//             ),
//             const SizedBox(height: 20),

//             Text(
//               "no_account".tr(),
//               style: TextStyle(
//                 fontSize: 18,
//                 fontWeight: FontWeight.normal,
//                 color: Colors.black54,
//               ),
//             ),
//             const SizedBox(height: 20),

//             PrimaryButton(
//               label: 'create_account'.tr(),
//               foregroundColor: Colors.black,
//               onPressed: () {
//                 context.read<AuthTabCubit>().changeTab(1);
//               },
//               borderColor: Colors.black26,
//             ),
//           ],
//         ),
//       ),
//     );
//   }
// }



==== FILE: lib\features\profile\presentation\widgets\profile_logged_in_view.dart ====
import 'package:flutter/material.dart';

class ProfileLoggedInView extends StatelessWidget {
  final String username;
  final String email;

  const ProfileLoggedInView({
    super.key,
    required this.username,
    required this.email,
  });

  @override
  Widget build(BuildContext context) {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Text('Welcome, $username', style: const TextStyle(fontSize: 20)),
          const SizedBox(height: 8),
          Text('Email: $email', style: const TextStyle(fontSize: 16)),
        ],
      ),
    );
  }
}



==== FILE: lib\features\profile\presentation\widgets\profile_logged_out_view.dart ====
import 'package:fig/features/profile/presentation/cubit/profile_cubit.dart';
import 'package:fig/features/profile/presentation/widgets/extra_buttons.dart';
import 'package:fig/features/profile/presentation/widgets/login_form.dart';
import 'package:fig/features/profile/presentation/widgets/signup_form.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'toggle_tab_bar.dart';

class ProfileLoggedOutView extends StatelessWidget {
  const ProfileLoggedOutView({super.key});

  @override
  Widget build(BuildContext context) {
    return BlocProvider<AuthTabCubit>(
      create: (_) => AuthTabCubit(),
      child: SafeArea(
        child: SingleChildScrollView(
          child: Padding(
            padding: const EdgeInsets.only(top: 8),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                // üß± Login/SignUp Container
                Padding(
                  padding: const EdgeInsets.all(8.0),
                  child: Container(
                    decoration: BoxDecoration(
                      color: Colors.white,
                      borderRadius: BorderRadius.circular(16),
                      boxShadow: [
                        BoxShadow(
                          color: Colors.black12,
                          blurRadius: 8,
                          offset: Offset(0, 4),
                        ),
                      ],
                    ),
                    child: Column(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        const ToggleTabBar(),
                        BlocBuilder<AuthTabCubit, int>(
                          builder: (context, index) {
                            return index == 0
                                ? const LoginForm()
                                : const SignUpForm();
                          },
                        ),
                      ],
                    ),
                  ),
                ),
                const SizedBox(height: 5),
                const ExtraButtonsForLoginOnly(),
              ],
            ),
          ),
        ),
      ),
    );
  }
}

// import 'package:fig/features/profile/presentation/cubit/profile_cubit.dart';
// import 'package:fig/features/profile/presentation/widgets/extra_buttons.dart';
// import 'package:fig/features/profile/presentation/widgets/login_form.dart';
// import 'package:fig/features/profile/presentation/widgets/signup_form.dart';
// import 'package:flutter/material.dart';
// import 'package:flutter_bloc/flutter_bloc.dart';
// import '../cubit/auth_tab_cubit.dart';
// import 'toggle_tab_bar.dart';

// class ProfileLoggedOutView extends StatelessWidget {
//   const ProfileLoggedOutView({super.key});
//   @override
//   Widget build(BuildContext context) {
//     return BlocProvider<AuthTabCubit>(
//       create: (_) => AuthTabCubit(),
//       child: SafeArea(
//         child: SingleChildScrollView(
//           child: Padding(
//             padding: EdgeInsets.only(top: 8),
//             child: Column(
//               mainAxisSize: MainAxisSize.min,
//               children: [
//                 Padding(
//                   padding: EdgeInsets.all(8.0),
//                   child: Container(
//                     decoration: BoxDecoration(
//                       color: Colors.white,
//                       borderRadius: BorderRadius.circular(16),
//                       boxShadow: [
//                         BoxShadow(
//                           color: Colors.black12,
//                           blurRadius: 8,
//                           offset: Offset(0, 4),
//                         ),
//                       ],
//                     ),
//                     child: Column(
//                       mainAxisSize: MainAxisSize.min,
//                       children: [
//                         ToggleTabBar(),
//                         BlocBuilder<AuthTabCubit, int>(
//                           builder: (context, index) {
//                             return index == 0
//                                 ? LoginForm()
//                                 : BlocProvider(
//                                   create: (_) => SignUpVisibilityCubit(),
//                                   child: SignUpForm(),
//                                 );
//                           },
//                         ),
//                       ],
//                     ),
//                   ),
//                 ),

//                 SizedBox(height: 5),
//                 ExtraButtonsForLoginOnly(),
//               ],
//             ),
//           ),
//         ),
//       ),
//     );
//   }
// }



==== FILE: lib\features\profile\presentation\widgets\signup_form.dart ====
import 'package:easy_localization/easy_localization.dart';
import 'package:fig/core/widgets/custom_button.dart';
import 'package:fig/features/profile/presentation/cubit/profile_cubit.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

class SignUpForm extends StatelessWidget {
  const SignUpForm({super.key});

  @override
  Widget build(BuildContext context) {
    context.locale; // Force rebuild on language change

    final usernameController = TextEditingController();
    final emailController = TextEditingController();
    final passwordController = TextEditingController();
    final confirmPasswordController = TextEditingController();

    return BlocProvider(
      create: (_) => SignUpVisibilityCubit(),
      child: Padding(
        padding: const EdgeInsets.all(24.0),
        child: Column(
          children: [
            BuildTextField(
              hint: 'username_hint'.tr(),
              controller: usernameController,
              validator:
                  (value) =>
                      value == null || value.isEmpty
                          ? 'username_required'.tr()
                          : null,
              prefixIcon: Icons.person,
            ),
            const SizedBox(height: 12),

            BuildTextField(
              hint: 'email_hint'.tr(),
              controller: emailController,
              validator: (value) {
                if (value == null || value.isEmpty)
                  return 'email_required'.tr();
                if (!value.contains('@')) return 'email_invalid'.tr();
                return null;
              },
              prefixIcon: Icons.email,
              keyboardType: TextInputType.emailAddress,
            ),
            const SizedBox(height: 12),

            BlocBuilder<SignUpVisibilityCubit, SignUpVisibilityState>(
              builder: (context, state) {
                return BuildTextField(
                  hint: 'password_hint'.tr(),
                  controller: passwordController,
                  obscureText: !state.isPasswordVisible,
                  showToggleIcon: true,
                  isPasswordVisible: state.isPasswordVisible,
                  onToggle:
                      () =>
                          context
                              .read<SignUpVisibilityCubit>()
                              .togglePasswordVisibility(),
                  prefixIcon: Icons.lock,
                );
              },
            ),
            const SizedBox(height: 12),

            BlocBuilder<SignUpVisibilityCubit, SignUpVisibilityState>(
              builder: (context, state) {
                return BuildTextField(
                  hint: 'confirm_password_hint'.tr(),
                  controller: confirmPasswordController,
                  obscureText: !state.isConfirmPasswordVisible,
                  showToggleIcon: true,
                  isPasswordVisible: state.isConfirmPasswordVisible,
                  onToggle:
                      () =>
                          context
                              .read<SignUpVisibilityCubit>()
                              .toggleConfirmPasswordVisibility(),
                  prefixIcon: Icons.lock_outline,
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'confirm_password_required'.tr();
                    }
                    if (value != passwordController.text) {
                      return 'passwords_do_not_match'.tr();
                    }
                    return null;
                  },
                );
              },
            ),

            const SizedBox(height: 24),
            PrimaryButton(
              label: 'create_account'.tr().toUpperCase(),
              onPressed: () {
                context.read<ProfileCubit>().signUp(
                  username: usernameController.text.trim(),
                  email: emailController.text.trim(),
                  password: passwordController.text.trim(),
                  confirmPassword: confirmPasswordController.text.trim(),
                );
              },
              backgroundColor: Colors.red.shade700,
            ),
            const SizedBox(height: 20),

            Text(
              "already_have_account".tr(),
              style: const TextStyle(
                fontSize: 18,
                fontWeight: FontWeight.normal,
                color: Colors.black54,
              ),
            ),
            const SizedBox(height: 20),

            PrimaryButton(
              borderColor: Colors.black26,
              label: 'login'.tr().toUpperCase(),
              foregroundColor: Colors.black,
              onPressed: () {
                context.read<AuthTabCubit>().changeTab(0);
              },
            ),
          ],
        ),
      ),
    );
  }
}



==== FILE: lib\features\profile\presentation\widgets\toggle_tab_bar.dart ====
import 'package:easy_localization/easy_localization.dart';
import 'package:fig/features/profile/presentation/cubit/profile_cubit.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

class ToggleTabBar extends StatelessWidget {
  const ToggleTabBar({super.key});

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<AuthTabCubit, int>(
      builder: (context, selectedIndex) {
        return LayoutBuilder(
          builder: (context, constraints) {
            final containerWidth = constraints.maxWidth;
            final tabWidth = containerWidth / 2;

            final isRtl = context.locale.languageCode == 'ar';

            final indicatorPosition =
                (isRtl ? (1 - selectedIndex) : selectedIndex) * tabWidth;

            return Stack(
              alignment: Alignment.bottomLeft,
              children: [
                AnimatedPositioned(
                  duration: const Duration(milliseconds: 200),
                  curve: Curves.easeInOut,
                  left: indicatorPosition,
                  child: Container(
                    width: tabWidth,
                    height: 2,
                    color: Colors.red[900],
                  ),
                ),
                Row(
                  children: [
                    _buildTab(context, 'LOGIN', 0, tabWidth, selectedIndex),
                    _buildTab(context, 'SIGN UP', 1, tabWidth, selectedIndex),
                  ],
                ),
              ],
            );
          },
        );
      },
    );
  }

  Widget _buildTab(
    BuildContext context,
    String labelKey,
    int index,
    double width,
    int selectedIndex,
  ) {
    final isSelected = index == selectedIndex;

    return GestureDetector(
      onTap: () => context.read<AuthTabCubit>().changeTab(index),
      child: SizedBox(
        width: width,
        height: 48,
        child: Center(
          child: Text(
            labelKey.tr(),
            style: TextStyle(
              fontSize: 16,
              fontWeight: isSelected ? FontWeight.bold : FontWeight.normal,
              color: isSelected ? Colors.red[900] : Colors.grey[600],
            ),
          ),
        ),
      ),
    );
  }
}



==== FILE: lib\main.dart ====
import 'package:fig/features/Navigation/presentation/cubit/navigation_cubit.dart';
import 'package:fig/features/home/domain/model/category_model_adapter.dart';
import 'package:fig/features/home/presentation/cubit/home_cubit.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:easy_localization/easy_localization.dart';
import 'package:fig/features/Navigation/presentation/pages/main_screen.dart';
import 'package:fig/features/profile/presentation/cubit/profile_cubit.dart';
import 'package:hive/hive.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await EasyLocalization.ensureInitialized();
  await Hive.deleteFromDisk();
  await initHive();

  runApp(
    EasyLocalization(
      supportedLocales: const [Locale('en'), Locale('ar')],
      path: 'assets/lang',
      fallbackLocale: const Locale('en'),
      child: const MyApp(),
    ),
  );
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MultiBlocProvider(
      providers: [
        BlocProvider(create: (_) => NavigationCubit()),
        BlocProvider(create: (_) => ProfileCubit()),
        BlocProvider(create: (_) => LocaleCubit()),
        BlocProvider(
          create:
              (_) =>
                  HomeCubit()
                    ..fetchCategories()
                    ..fetchProducts(),
        ),
      ],
      child: Builder(
        builder: (context) {
          return MaterialApp(
            title: 'FIG App',
            debugShowCheckedModeBanner: false,
            theme: ThemeData(primarySwatch: Colors.grey, useMaterial3: true),
            localizationsDelegates: context.localizationDelegates,
            supportedLocales: context.supportedLocales,
            locale: context.locale,
            home: const MainScreen(),
          );
        },
      ),
    );
  }
}



